<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[fsword's blog]]></title>
  <link href="http://fsword.github.com/atom.xml" rel="self"/>
  <link href="http://fsword.github.com/"/>
  <updated>2013-04-20T16:37:02+08:00</updated>
  <id>http://fsword.github.com/</id>
  <author>
    <name><![CDATA[fsword]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby为什么会有eigenclass]]></title>
    <link href="http://fsword.github.com/blog/2013/04/02/rubywei-shi-yao-hui-you-eigenclass/"/>
    <updated>2013-04-02T21:00:00+08:00</updated>
    <id>http://fsword.github.com/blog/2013/04/02/rubywei-shi-yao-hui-you-eigenclass</id>
    <content type="html"><![CDATA[<p>论坛上有人问了一个问题——<a href="http://ruby-china.org/topics/9586">在ruby语言中，为什么会有eigenclass这种设计？</a>后面有各种回答，有的还相当不错，比如<a href="http://ruby-china.org/topics/9586#reply10">这个</a>。我也想写一篇凑数，也是帮自己理清思路。</p>

<p>要回答好这个问题很不容易，我们也许可以从零开始，重新发明一遍ruby的对象模型看看？</p>

<p>ruby是面向对象语言，所谓对象和类一般会是这样——<br/>
<img src="./images/my_thing.png" alt="" /><br/>
很简单，是不是？别急，我们要给对象（object）和类（class）加上一些要求——<br/>
1. 所有的对象都有自己所属的类<br/>
2. 所有的类都有父类，除了顶级父类（BasicObject）<br/>
3. 类本身也是对象<br/>
4. 最后——麻烦来了，根据(3)，所有的类都是对象，再根据(1)，这些<strong>类</strong>(作为对象)<strong>都要有自己所属的类</strong></p>

<p>文字很枯燥，我们用代码来演示</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">irb</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="n">dev</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Fixnum</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="n">dev</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="no">Fixnum</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="nb">Integer</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="n">dev</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="no">Fixnum</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Numeric</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="n">dev</span> <span class="p">:</span><span class="mo">004</span> <span class="o">&gt;</span> <span class="no">Fixnum</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Object</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="n">dev</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="no">Fixnum</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">BasicObject</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="n">dev</span> <span class="p">:</span><span class="mo">006</span> <span class="o">&gt;</span> <span class="no">Fixnum</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="n">dev</span> <span class="p">:</span><span class="mo">007</span> <span class="o">&gt;</span> <span class="no">Fixnum</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Object</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="n">dev</span> <span class="p">:</span><span class="mo">00</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="no">Fixnum</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Class</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="n">dev</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="no">Object</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Class</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="n">dev</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span> <span class="no">Class</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Object</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们把module也加上，画成一张图就是这样——<br/>
<img src="./images/object_class.png" alt="" /></p>

<p>现在让我们考虑一下，这样的对象和类的模型应该如何实现&#8230;&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成中的缺环-4]]></title>
    <link href="http://fsword.github.com/blog/2012/12/14/chi-xu-ji-cheng-zhong-de-que-huan-4/"/>
    <updated>2012-12-14T22:14:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/12/14/chi-xu-ji-cheng-zhong-de-que-huan-4</id>
    <content type="html"><![CDATA[<p>昨天我用了很罗嗦的语言解释了一个简单的 DSL 例子，这是为了方便讲述后面的内容，那个例子是典型的“麻雀虽小，五脏俱全”，回想起来，它至少包含了这么几样——</p>

<pre><code>* 一个 DSL 解释脚本(dsl.rb)
* 一个装载脚本(run.rb)
* 使用 DSL 编写的文件(myapp)
</code></pre>

<p>这么继续演化下去，我们就会得到一个比较详细的实现方案。</p>

<p>不过，考虑到复杂性的增加，我们现在应该考虑一点设计了，比如代码的层次和结构。</p>

<p>代码如何组织呢？这是一个脚本为中心的项目，因此我们决定不使用unix那种传统的/usr, /bin, /etc 方案，而是直接把所有代码都放在一个目录下，这样比较方便清理，不用专门的打包工具。</p>

<p>首先很容易想到，我们需要普通的 config 目录；其次，考虑到我们会引入很多 profile 文件，所以建立一个专门的profile目录似乎也是很必要的；另外，作为脚本性质的项目，一定要有明确的调用入口，我们建立一个 script 目录用于存放直接执行用的脚本。</p>

<p>接下来是 lib 目录，我们应该把代码分开，做好高內聚和低耦合（这个没忘吧，脚本也要注意这些原则哦），因此一开始会是这样——</p>

<p><img src="http://fsword.github.com/images/adsci_dirs_old.png" alt="目录结构" /></p>

<p>看起来不错，但是用代码稍一尝试就发现了一些问题，主要是lib目录。</p>

<ul>
<li>没有考虑到外部服务的耦合，我们使用的系统服务应该是松耦合在这个体系中的，比如虚拟机分配系统，在淘宝这样的环境中，虚拟机分配系统可能有多种方案，随着业务和组织结构的变化，我们有可能需要切换不同的分配系统。</li>
<li>应用专用的目录没有办法去落实，实际上，DSL的方案决定了我们不会为某个应用做特殊化，我们要做的是各种服务的组装。</li>
<li>与capistrano相比，profile的设计显然有些僵硬，后续可能需要调整，当然，这样演化出来的可能是一个工具包，但是目前也想不清楚，我们把决策延后，暂时先不管它。</li>
</ul>


<p>经过设计和编码的迭代，目前是这样的：</p>

<p><img src="http://fsword.github.com/images/adsci_dirs.png" alt="目录结构" /></p>

<p>这并不是最后的结论，大家知道，设计和开发往往是交替进行的。不过无论如何，现在可以接着前进了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成中的缺环-3]]></title>
    <link href="http://fsword.github.com/blog/2012/12/13/chi-xu-ji-cheng-zhong-de-que-huan-3/"/>
    <updated>2012-12-13T13:45:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/12/13/chi-xu-ji-cheng-zhong-de-que-huan-3</id>
    <content type="html"><![CDATA[<p>终于要讲到 DSL 了，其实这个话题我更加感兴趣一些，这也是ruby的强项 :-)</p>

<p>我们首先应该从用户角度出发，看看用户写出来的 dsl 应该是什么样子，例如像一个配置文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- encoding : UTF-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 定义web server类型，可选值: apache, nginx, tengine</span>
</span><span class='line'><span class="c1"># web_server :apache</span>
</span><span class='line'><span class="n">web_server</span> <span class="ss">:apache</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 定义应用服务器类型，可选值: tomcat, jboss</span>
</span><span class='line'><span class="c1"># app_server :tomcat # option: jboss</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 申请数据库资源</span>
</span><span class='line'><span class="c1"># from: 有时需要从已有的数据库中复制数据，from参数用于指明来源的数据库名称</span>
</span><span class='line'><span class="n">db</span> <span class="ss">:from</span> <span class="o">=&gt;</span> <span class="s1">&#39;sample&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设定源代码获取方式，目前仅支持git和svn两种</span>
</span><span class='line'><span class="n">source</span> <span class="ss">:svn</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://svn.yourserver.com/branches/some_branch&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设定安装包的来源，目前仅支持 rpm 包安装</span>
</span><span class='line'><span class="c1"># 注意：如果设定了安装包，adsci将跳过build环境，此时source设定不会生效</span>
</span><span class='line'><span class="n">pkg</span>   <span class="ss">:rpm</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://yum.yourserver.com/your_package.rpm&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设定 mock 服务，指定的服务将用 mock 支持</span>
</span><span class='line'><span class="n">mock</span> <span class="ss">:service</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;myservice.core.1.0.0&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设定所依赖的其它 profile ，需要在指定 profile 的服务/应用启动后再启动</span>
</span><span class='line'><span class="n">after</span> <span class="ss">:portal</span>  <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 在指定的 profile （这个例子中是 portal 应用）中为当前节点添加 url rewrite 规则</span>
</span><span class='line'>  <span class="n">rewrite</span> <span class="ss">:for</span> <span class="o">=&gt;</span> <span class="ss">:me</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设定依赖的其它 profile ，不考虑启动顺序</span>
</span><span class='line'><span class="n">after</span> <span class="ss">:portal</span>  <span class="k">do</span>
</span><span class='line'>  <span class="n">route</span> <span class="ss">:for</span> <span class="o">=&gt;</span> <span class="ss">:me</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>真正的 DSL 应该比这个更强大一些，不过从这样开始应该不错。</p>

<blockquote><p>硬广告：这个文件比较简单，唯一需要说明的是tengine，这是淘宝基于nginx扩展的一个开源项目，好事者可以看<a href="https://github.com/taobao/tengine">这里</a>。</p></blockquote>

<p>用户通过这种方式说明自己的应用应该是怎样部署和工作的，其它事情交给工具。</p>

<p>实现DSL最常见的做法就是把DSL语句变成一个函数，然后在定义函数的上下文中eval用户的脚本，比如一个最简单的语法<code>web_server :apache</code>，
可以这么写——</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Dsl</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">web_server</span> <span class="nb">name</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;设定web server为</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果——</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">1.9.3p327 :008 &gt; include Dsl</span>
</span><span class='line'><span class="go"> =&gt; Object </span>
</span><span class='line'><span class="go">1.9.3p327 :009 &gt; eval(&quot;web_server :nginx&quot;)</span>
</span><span class='line'><span class="go">设定web server为nginx</span>
</span><span class='line'><span class="go"> =&gt; nil </span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是最简单的配置项。<br/>
但是这样做有什么意义呢？我们可以这样修改一下 Dsl 的代码——</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- encoding : UTF-8 -*-</span>
</span><span class='line'><span class="c1"># 文件名 dsl.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Dsl</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">web_server</span> <span class="nb">name</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="ss">:apache</span>
</span><span class='line'>      <span class="sb">`sudo /etc/init.d/httpd start`</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="nb">name</span> <span class="o">==</span> <span class="ss">:nginx</span>
</span><span class='line'>      <span class="sb">`sudo /etc/init.d/nginx start`</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;抱歉，目前不支持这种 web server&#39;</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;启动 </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样也把eval的内容存为文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- encoding : UTF-8 -*-</span>
</span><span class='line'><span class="c1"># 文件名 myapp</span>
</span><span class='line'><span class="n">web_server</span> <span class="ss">:nginx</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后编写一个装载脚本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- encoding : UTF-8 -*-</span>
</span><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># 文件名 run.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./dsl&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kp">include</span> <span class="no">Dsl</span>
</span><span class='line'><span class="nb">eval</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;myapp&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
执行一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">run</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="o">[</span><span class="n">sudo</span><span class="o">]</span> <span class="n">password</span> <span class="k">for</span> <span class="n">john</span><span class="p">:</span>
</span><span class='line'><span class="err">启动</span> <span class="n">nginx</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就完成了一个最简单的 dsl 样例，在这个样例中，我们通过一个关键词 <code>web_server</code> 驱动了逻辑</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成中的缺环-2]]></title>
    <link href="http://fsword.github.com/blog/2012/12/12/chi-xu-ji-cheng-zhong-de-que-huan-2/"/>
    <updated>2012-12-12T17:39:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/12/12/chi-xu-ji-cheng-zhong-de-que-huan-2</id>
    <content type="html"><![CDATA[<p>「接上篇」比较新旧两个图，可以发现，除了要做好多应用的部署自动化以外，还有一个问题需要我们考虑，那就是资源的自动分配。</p>

<p>常见的是数据库资源，由于我们过去一直依赖DBA分配数据库帐号，每次测试都是使用的同样的一个数据库，这样一来，开发人员想要测试就要申请自己的数据库资源，有新来的同学如果不知道，就会用源码中配好的那个数据库链接，如果这时有人在测试，那就悲剧了。而如果偶尔需要多个分支一起开发，情况就更加可怕。</p>

<p>解决这个问题的办法是资源隔离和动态分配。而且，这个做法不只限于数据库，几乎所有的基础设施都要这么做，你会发现这个环境似乎有些象“云”，好吧，虽然我不喜欢这个buzz word，但是沿着这个思路走下去，确实可以用到一些“云xx”的技术，我们只要拿来主义就可以了。</p>

<p>循着这个思路，我们搭建了一些支持动态分配资源的服务，这是后续工作的基础。为了能够方便的操控部署工作，我又把自己一直负责的easy commander（以前叫 AppOSS）也嫁接了过来，这样我们就得到了这些</p>

<p><img src="http://fsword.github.com/images/ci_deploy.png" alt="部署图" /></p>

<p>对单个应用而言，本来就有一些shell脚本（例如执行 maven 打包和启动停止服务器之类），所以我只要简单写一些ruby脚本负责协作，就让这个原型跑了起来，经过验证，可行。</p>

<p>接下来要做什么？我们现在仅仅用脚本驱动了起来，而ruby语言在我们这个团队中并不是公共知识，所以最好能够开发一些 DSL ，让大家简单的写一些“配置文件”，就能让自己关心的几个系统部署好。</p>

<p>如何实现这些DSL呢？明天接着说</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成中的缺环-1]]></title>
    <link href="http://fsword.github.com/blog/2012/12/12/chi-xu-ji-cheng-zhong-de-que-huan/"/>
    <updated>2012-12-12T17:11:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/12/12/chi-xu-ji-cheng-zhong-de-que-huan</id>
    <content type="html"><![CDATA[<p>我们通常说的持续集成，是指通过彻底的自动化手段，让软件在需求、设计、编码、测试这几个环节上自然流动，形成连续的迭代过程，这里的关键词是“持续”，基本技术手段就是“自动化”了</p>

<p>不过说起来容易做起来难，目前为止，很多公司和团队都在一定程度上做了一些努力，我们也是如此，不过在审视自己的工作时，发现有个环节似乎缺失了，这就是联调或者说系统集成。</p>

<p>从某种角度上看，软件开发的过程是将大功能拆成小任务，然后自底向上逐步累积的，如图</p>

<p><img src="http://fsword.github.com/images/software_layer.png" alt="software_layer" /></p>

<p>我们的测试实际上也是循着这个基本前提进行的。众所周知，越是底层的软件单元，越容易进行覆盖性测试，但代价是需要在边界上进行模拟，也许是mock，也许是simulator，而高层的测试可以避免在边界上的这种模拟成本，代价是不能完备的覆盖所有可能的逻辑分支。</p>

<p>通常的做法是结合，我们区分了单元测试、模块测试、集成测试几个层次。在单元测试中，我们使用mock技术尽可能覆盖逻辑分支；而在集成测试环节，更多的是关键路径和用户视角。</p>

<p>但是在我们这样的软件系统中，很少有独立工作的应用系统，大部分系统都是基于某种分布式架构进行协同的，常见的情况是这样的</p>

<p><img src="http://fsword.github.com/images/old_way.png" alt="old way" /></p>

<p>这样的结构对我们的质量工作提出了挑战，因为我们没有对应系统间协同测试的基础设施（至少我目前没有找到），这迫使我们尝试一条以前没有走过的路。</p>

<p>如前所述，基本的思路还是自动化，只不过现在我们要处理多个系统的自动部署和测试，相对而言，这种场景中的测试更接近验收测试，相对不是很复杂，所以关键就在部署上，我们希望实现这样的一张图</p>

<p><img src="http://fsword.github.com/images/new_way.png" alt="new way" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[erlang环境安装FAQ]]></title>
    <link href="http://fsword.github.com/blog/2012/12/09/erlanghuan-jing-an-zhuang-faq/"/>
    <updated>2012-12-09T15:46:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/12/09/erlanghuan-jing-an-zhuang-faq</id>
    <content type="html"><![CDATA[<h3>如何添加 wx 支持</h3>

<p>erlang的很多GUI工具都是基于wx库的，比如: reltool，但是缺省的ubuntu环境中的 erlang 包是没有wx支持的，常见错误是这样</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1&gt; reltool:start().
</span><span class='line'>
</span><span class='line'>=ERROR REPORT==== 9-Dec-2012::15:28:51 ===
</span><span class='line'>ERROR: Could not find 'wxe_driver.so' in: /home/john/software/otp/lib/erlang/lib/wx-0.99.1/priv
</span><span class='line'>** exception exit: {load_driver,"No driver found"}
</span><span class='line'>     in function  wxe_server:start/0 (wxe_server.erl, line 64)
</span><span class='line'>         in call from wx:new/1 (wx.erl, line 99)
</span><span class='line'>         in call from reltool_sys_win:do_init/1 (reltool_sys_win.erl, line 140)
</span><span class='line'>         in call from reltool_sys_win:init/1 (reltool_sys_win.erl, line 130)
</span><span class='line'>         in call from proc_lib:init_p_do_apply/3 (proc_lib.erl, line 227)</span></code></pre></td></tr></table></div></figure>


<p>有经验的人一般会尝试自己编译erlang环境，但可能会发现编译时找不到wx库。实际上，ubuntu环境一般确实会安装 libwxgtk2.8-dev 这个包，但是需要添加一个 link （参考<a href="http://wiki.wxwidgets.org/Installing_and_configuring_under_Ubuntu">官方说明</a>）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /usr/include
</span><span class='line'>sudo ln -sv wx-2.8/wx wx</span></code></pre></td></tr></table></div></figure>


<p>另外，提醒一下，你可以在 configure 阶段验证是否支持 wx ，方法是看是否有下面的输出：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>checking for debug build of wxWidgets... checking for wx-config... /usr/bin/wx-config
</span><span class='line'>checking for wxWidgets version &gt;= 2.8.4 (--unicode --debug=yes)... no
</span><span class='line'>checking for standard build of wxWidgets... checking for wx-config... (cached) /usr/bin/wx-config
</span><span class='line'>checking for wxWidgets version &gt;= 2.8.4 (--unicode --debug=no)... yes (version 2.8.12)</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模块的使用]]></title>
    <link href="http://fsword.github.com/blog/2012/12/05/mo-kuai-de-shi-yong/"/>
    <updated>2012-12-05T22:23:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/12/05/mo-kuai-de-shi-yong</id>
    <content type="html"><![CDATA[<p>我们常常使用模块，一般是这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">X</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span><span class="p">;</span> <span class="s1">&#39;hello&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">world</span><span class="p">;</span> <span class="s1">&#39;world&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用起来很简单</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p327</span> <span class="p">:</span><span class="mo">006</span> <span class="o">&gt;</span>   <span class="kp">include</span> <span class="n">X</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Object</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p327</span> <span class="p">:</span><span class="mo">007</span> <span class="o">&gt;</span> <span class="n">hello</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过，有时候我不想先要include一下才能使用，这是会遇到错误</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p327</span> <span class="p">:</span><span class="mo">006</span> <span class="o">&gt;</span> <span class="n">X</span><span class="o">.</span><span class="n">hello</span>
</span><span class='line'><span class="no">NoMethodError</span><span class="p">:</span> <span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`hello&#39; for X:Module</span>
</span><span class='line'><span class="sb">    from (irb):6</span>
</span><span class='line'><span class="sb">    from /home/john/.rvm/rubies/ruby-1.9.3-p327-falcon/bin/irb:16:in `</span><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是因为使用 def 定义的方法都是 module 的实例方法，当然，就象可以在class里定义类方法一样，module也可以这么做</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">X</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">hello</span><span class="p">;</span> <span class="s1">&#39;hello&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">world</span><span class="p">;</span> <span class="s1">&#39;world&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># in irb</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p327</span> <span class="p">:</span><span class="mo">007</span> <span class="o">&gt;</span> <span class="n">X</span><span class="o">.</span><span class="n">hello</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于方法很多的 module ，我们可以少写几个<code>self.</code>，只要借助 extend 机制</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">X</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span><span class="p">;</span> <span class="s1">&#39;hello&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">world</span><span class="p">;</span> <span class="s1">&#39;world&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># in irb</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p327</span> <span class="p">:</span><span class="mo">007</span> <span class="o">&gt;</span>   <span class="n">X</span><span class="o">.</span><span class="n">hello</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p327</span> <span class="p">:</span><span class="mo">00</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="kp">include</span> <span class="n">X</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Object</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p327</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">hello</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个 extend 的作用是把当前这个module extend出去，使实例方法同时承担类方法的职责，那么，如果我们不希望这些方法被include呢，今天看 I18n的代码，学了一招</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">X</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">Module</span><span class="o">.</span><span class="n">new</span><span class="p">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">hello</span><span class="p">;</span> <span class="s1">&#39;hello&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">world</span><span class="p">;</span> <span class="s1">&#39;world&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于extend的不是当前module，而是一个匿名module，这块“领地”其它代码接触不到，所以其内部的方法不能被include，达到了我们的要求</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p327</span> <span class="p">:</span><span class="mo">00</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="n">X</span><span class="o">.</span><span class="n">hello</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p327</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="kp">include</span> <span class="n">X</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="no">Object</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p327</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span> <span class="n">hello</span>
</span><span class='line'><span class="no">NameError</span><span class="p">:</span> <span class="n">undefined</span> <span class="n">local</span> <span class="n">variable</span> <span class="ow">or</span> <span class="nb">method</span> <span class="sb">`hello&#39; for main:Object</span>
</span><span class='line'><span class="sb">    from (irb):10</span>
</span><span class='line'><span class="sb">    from /home/john/.rvm/rubies/ruby-1.9.3-p327-falcon/bin/irb:16:in `</span><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>灵活运用module，可以很好的提高代码的复用性，同时保护好必要的封装，have fun !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[链式调用的代码怎么写]]></title>
    <link href="http://fsword.github.com/blog/2012/08/26/lian-shi-diao-yong-de-dai-ma-zen-yao-xie/"/>
    <updated>2012-08-26T13:55:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/08/26/lian-shi-diao-yong-de-dai-ma-zen-yao-xie</id>
    <content type="html"><![CDATA[<p>使用ruby，一个很有价值的地方就是发明了各种DSL，比如这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">tags</span><span class="o">.</span><span class="n">delete_if</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">nil?</span><span class="p">}</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="o">.</span><span class="n">sub</span><span class="sr"> /^!/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">}</span><span class="o">.</span><span class="n">delete_if</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">empty?</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种风格通常被称为链式调用，优点是代码比较连贯，去掉了多余的局部变量和赋值语句，符合人类的思维习惯。</p>

<p>但是也有隐含的问题——代码可读性有时候会受影响，例如这里的例子中，对数组的变换包括三个步骤，如果看的不仔细，就可能会遗漏。</p>

<p>按照我自己的经验，一般会改成这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">tags</span><span class="o">.</span>
</span><span class='line'>     <span class="n">delete_if</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:nil?</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>     <span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="o">.</span><span class="n">sub</span><span class="sr"> /^!/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">}</span><span class="o">.</span>
</span><span class='line'>     <span class="n">delete_if</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:empty?</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，每行都是一个独立单一的逻辑部分，可读性就有了保障。
问题并没有结束，链式调用的另外一个常见问题是对于故障的处理，使用者有时会搞不清楚到底在哪里出了错。</p>

<p>由于这种api一般会使用延迟计算的方式（延迟计算是个大的话题，请google），之前的环节仅仅是收集计算所需要的逻辑，真正出问题总是在最后，而那时的错误可以输出完整的计算条件，所以大部分情况下故障处理还不是很复杂。</p>

<p>但是如果有的api设计的不好或者出现了意料以外的问题，我们怎么办呢？</p>

<p>处理故障最常用的工具是日志，而链式调用不太好做的也就是日志，好在ruby的标准库提供了一个很好用的api——tap（很多人一开始看到这个函数，发现什么都不做，觉得很奇怪），我们看下面的例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">tags</span>                       <span class="o">.</span><span class="n">tap</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&quot;origin size: </span><span class="si">#{</span><span class="n">x</span><span class="o">.</span><span class="n">size</span><span class="si">}</span><span class="s2">&quot;</span>    <span class="p">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">delete_if</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:nil?</span><span class="p">)</span>     <span class="o">.</span><span class="n">tap</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&quot;del nil    : </span><span class="si">#{</span><span class="n">x</span><span class="o">.</span><span class="n">size</span><span class="si">}</span><span class="s2">&quot;</span>    <span class="p">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="o">.</span><span class="n">sub</span><span class="sr"> /^!/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">}</span><span class="o">.</span><span class="n">tap</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&quot;sub        : </span><span class="si">#{</span><span class="n">x</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">delete_if</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:empty?</span><span class="p">)</span>   <span class="o">.</span><span class="n">tap</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span> <span class="s2">&quot;del empty  : </span><span class="si">#{</span><span class="n">x</span><span class="o">.</span><span class="n">size</span><span class="si">}</span><span class="s2">&quot;</span>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的代码，既方便了连贯的表达业务逻辑，又能在必要的时候输出需要的日志，基本上就比较靠谱了，顺便在说一句，我专门调整了代码的对齐并不是简单的为了好看，如果有一天你确定这段代码不再需要日志输出，那么使用很多编辑器都支持的列编辑功能就可以一次性删除掉日志了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth 2.0 and the Road to Hell 中文版]]></title>
    <link href="http://fsword.github.com/blog/2012/08/01/oauth-2-dot-0-and-the-road-to-hell-zhong-wen-ban/"/>
    <updated>2012-08-01T10:45:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/08/01/oauth-2-dot-0-and-the-road-to-hell-zhong-wen-ban</id>
    <content type="html"><![CDATA[<p>They say the road to hell is paved with good intentions. Well, that’s OAuth 2.0.
人们常说，通往地狱的路往往都是处于好心铺设的。我想 OAuth 2.0 就是这样。</p>

<p>Last month I reached the painful conclusion that I can no longer be associated with the OAuth 2.0 standard. I resigned my role as lead author and editor, withdraw my name from the specification, and left the working group. Removing my name from a document I have painstakingly labored over for three years and over two dozen drafts was not easy. Deciding to move on from an effort I have led for over five years was agonizing.</p>

<p>上个月我做了一个痛苦的决定，彻底和 OAuth 2.0 标准断绝关系。我辞去了首席作者和编辑，从文档中删除了我的名字，并且离开了工作组。从一份你辛勤工作了三年，拥有几十份草稿的文档上删除自己的名字并不容易，决定离开一个我领导了五年的项目十分的痛苦。</p>

<p>There wasn’t a single problem or incident I can point to in order to explain such an extreme move. This is a case of death by a thousand cuts, and as the work was winding down, I’ve found myself reflecting more and more on what we actually accomplished. At the end, I reached the conclusion that OAuth 2.0 is a bad protocol. WS-* bad. It is bad enough that I no longer want to be associated with it. It is the biggest professional disappointment of my career.</p>

<p>促成我做这个极端决定的并不是某一件事情，这是一次由无数次的伤害导致的死亡。随着工作接近尾声，我越来越意识到 OAuth 2.0 是非常糟糕的协议，就像 WS-* 那些协议一样的烂，烂到我不愿意跟它有任何牵扯。这是我职业生涯中的最大遗憾。</p>

<p>All the hard fought compromises on the mailing list, in meetings, in special design committees, and in back channels resulted in a specification that fails to deliver its two main goals – security and interoperability. In fact, one of the compromises was to rename it from a protocol to a framework, and another to add a disclaimer that warns that the specification is unlike to produce interoperable implementations.</p>

<p>在邮件列表、会议、还是专家委员内部，无数次争论的结果却是，这份标准并没有达到两个最重要的目标 - 安全和互操作性。实际上，有一个（各方达成的）妥协就是将这份规范从协议变成一个框架，而另外一个妥协则是在规范上添加了一个申明——声称这份规范不用于建立交互式的实现。</p>

<p>When compared with OAuth 1.0, the 2.0 specification is more complex, less interoperable, less useful, more incomplete, and most importantly, less secure.</p>

<p>和 OAuth 1.0 相比，2.0的标准更加的复杂，缺乏互操作性，不实用，不完整，最重要的是，不安全。</p>

<p>To be clear, OAuth 2.0 at the hand of a developer with deep understanding of web security will likely result is a secure implementation. However, at the hands of most developers – as has been the experience from the past two years – 2.0 is likely to produce insecure implementations.</p>

<p>更明确的说，OAuth 2.0 在一个对安全有深入理解的开发者手里会是不错的。但是在大部分开发者手中，2.0的标准将会导致明显不安全的结果。</p>

<h2>How did we get here? 我们是如何变成这样的？</h2>

<p>At the core of the problem is the strong and unbridgeable conflict between the web and the enterprise worlds. The OAuth working group at the IETF started with strong web presence. But as the work dragged on (and on) past its first year, those web folks left along with every member of the original 1.0 community. The group that was left was largely all enterprise… and me.</p>

<p>问题的核心来源于“web”和“企业级”这两个不同世界的强大而不可逾越的冲突。IETF的OAuth工作组开始时有很强的web感，然而随着第一年的工作一再拖延，来自OAuth 1.0社区的web力量一个接一个的离开，这个工作组逐渐变得只剩下了喜欢“企业级”的成员和&#8230;&#8230;我。</p>

<p>[翻译未完成，待续] <br/>
The web community was looking for a protocol very much in-line with 1.0, with small improvement in areas that proved lacking: simplifying signature, adding a light identity layer, addressing native applications, adding more flows to accommodate new client types, and improving security. The enterprise community was looking for a framework they can use with minimal changes to their existing systems, and for some, a new source of revenues through customization. To understand the depth of the divide – in an early meeting the web folks wanted a flow optimized for in-browser clients while the enterprise folks wanted a flow using SAML assertions.</p>

<p>The resulting specification is a designed-by-committee patchwork of compromises that serves mostly the enterprise. To be accurate, it doesn’t actually give the enterprise all of what they asked for directly, but it does provide for practically unlimited extensibility. It is this extensibility and required flexibility that destroyed the protocol. With very little effort, pretty much anything can be called OAuth 2.0 compliant.</p>

<h2>Under the Hood</h2>

<p>To understand the issues in 2.0, you need to understand the core architectural changes from 1.0:
* Unbounded tokens - In 1.0, the client has to present two sets of credentials on each protected resource request, the token credentials and the client credentials. In 2.0, the client credentials are no longer used. This means that tokens are no longer bound to any particular client type or instance. This has introduced limits on the usefulness of access tokens as a form of authentication and increased the likelihood of security issues.
* Bearer tokens  - 2.0 got rid of all signatures and cryptography at the protocol level. Instead it relies solely on TLS. This means that 2.0 tokens are inherently less secure as specified. Any improvement in token security requires additional specifications and as the current proposals demonstrate, the group is solely focused on enterprise use cases.
* Expiring tokens - 2.0 tokens can expire and must be refreshed. This is the most significant change for client developers from 1.0 as they now need to implement token state management. The reason for token expiration is to accommodate self-encoded tokens – encrypted tokens which can be authenticated by the server without a database look-up. Because such tokens are self-encoded, they cannot be revoked and therefore must be short-lived to reduce their exposure. Whatever is gained from the removal of the signature is lost twice in the introduction of the token state management requirement.
* Grant types - In 2.0, authorization grants are exchanged for access tokens. Grant is an abstract concept representing the end-user approval. It can be a code received after the user clicks ‘Approve’ on an access request, or the user’s actual username and password. The original idea behind grants was to enable multiple flows. 1.0 provides a single flow which aims to accommodate multiple client types. 2.0 adds significant amount of specialization for different client type.</p>

<h2>Indecision Making</h2>

<p>These changes are all manageable if put together in a well-defined protocol. But as has been the nature of this working group, no issue is too small to get stuck on or leave open for each implementation to decide. Here is a very short sample of the working group’s inability to agree:</p>

<ul>
<li>No required token type</li>
<li>No agreement on the goals of an HMAC-enabled token type</li>
<li>No requirement to implement token expiration</li>
<li>No guidance on token string size, or any value for that matter</li>
<li>No strict requirement for registration</li>
<li>Loose client type definition</li>
<li>Lack of clear client security properties</li>
<li>No required grant types</li>
<li>No guidance on the suitability or applicability of grant types</li>
<li>No useful support for native applications (but lots of lip service)</li>
<li>No required client authentication method</li>
<li>No limits on extensions</li>
</ul>


<p>On the other hand, 2.0 defines 4 new registries for extensions, along with additional extension points via URIs. The result is a flood of proposed extensions. But the real issues is that the working group could not define the real security properties of the protocol. This is clearly reflected in the security consideration section which is largely an exercise of hand waving. It is barely useful to security experts as a bullet point of things to pay attention to.</p>

<p>In fact, the working group has also produced a 70 pages document describing the 2.0 threat model which does attempt to provide additional information but suffers from the same fundamental problem: there isn’t an actual protocol to analyze.</p>

<h2>Reality</h2>

<p>In the real world, Facebook is still running on draft 12 from a year and a half ago, with absolutely no reason to update their implementation. After all, an updated 2.0 client written to work with Facebook’s implementation is unlikely to be useful with any other provider and vice-versa. OAuth 2.0 offers little to none code re-usability.</p>

<p>What 2.0 offers is a blueprint for an authorization protocol. As defined, it is largely useless and must be profiles into a working solution – and that is the enterprise way. The WS-* way. 2.0 provides a whole new frontier to sell consulting services and integration solutions.</p>

<p>The web does not need yet another security framework. It needs simple, well-defined, and narrowly suited protocols that will lead to improved security and increased interoperability. OAuth 2.0 fails to accomplish anything meaningful over the protocol it seeks to replace.</p>

<h2>To Upgrade or Not to Upgrade</h2>

<p>Over the past few months, many asked me if they should upgrade to 2.0 or which version of the protocol I recommend they implement. I don’t have a simple answer.</p>

<p>If you are currently using 1.0 successfully, ignore 2.0. It offers no real value over 1.0 (I’m guessing your client developers have already figured out 1.0 signatures by now).</p>

<p>If you are new to this space, and consider yourself a security expert, use 2.0 after careful examination of its features. If you are not an expert, either use 1.0 or copy the 2.0 implementation of a provider you trust to get it right (Facebook’s API documents are a good place to start). 2.0 is better for large scale, but if you are running a major operation, you probably have some security experts on site to figure it all out for you.</p>

<h2>Now What?</h2>

<p>I’m hoping someone will take 2.0 and produce a 10 page profile that’s useful for the vast majority of web providers, ignoring the enterprise. A 2.1 that’s really 1.5. But that’s not going to happen at the IETF. That community is all about enterprise use cases and if you look at their other efforts like OpenID Connect (which too was a super simple proposal turned into almost a dozen complex specifications), they are not capable of simple.</p>

<p>I think the OAuth brand is in decline. This framework will live for a while, and given the lack of alternatives, it will gain widespread adoption. But we are also likely to see major security failures in the next couple of years and the slow but steady devaluation of the brand. It will be another hated protocol you are stuck with.</p>

<p>At the same time, I am expecting multiple new communities to come up with something else that is more in the spirit of 1.0 than 2.0, and where one use case is covered extremely well. OAuth 1.0 was all about small web startups looking to solve a well-defined problem they needed to solve fast. I honestly don’t know what use cases OAuth 2.0 is trying to solve any more.</p>

<h2>Final Note</h2>

<p>This is a sad conclusion to a once promising community. OAuth was the poster child of small, quick, and useful standards, produced outside standards bodies without all the process and legal overhead.</p>

<p>Our standards making process is broken beyond repair. This outcome is the direct result of the nature of the IETF, and the particular personalities overseeing this work. To be clear, these are not bad or incompetent individuals. On the contrary – they are all very capable, bright, and otherwise pleasant. But most of them show up to serve their corporate overlords, and it’s practically impossible for the rest of us to compete.</p>

<p>Bringing OAuth to the IETF was a huge mistake. Not that the alternative (WRAP) would have been a better outcome, but at least it would have taken three less years to figure that out. I stuck around as long as I could stand it, to fight for what I thought was best for the web. I had nothing personally to gain from the decisions being made. At the end, one voice in opposition can slow things down, but can’t make a difference.</p>

<p>I failed.</p>

<p>We failed.<br/>
<a href="http://hueniverse.com/2012/07/oauth-2-0-and-the-road-to-hell/">link</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby中的self]]></title>
    <link href="http://fsword.github.com/blog/2012/06/29/rubyzhong-de-self/"/>
    <updated>2012-06-29T09:38:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/06/29/rubyzhong-de-self</id>
    <content type="html"><![CDATA[<p>ruby-china.org 上有人问<a href="http://ruby-china.org/topics/4026">self的含义</a>，发篇帖子解释一下<br/>
ruby里面的class关键字和def关键字的作用其实是<strong>改变上下文</strong>，这个<code>self</code>就是被改变的<code>上下文</code>中最重要的一个，按照ruby语法，遇到这样的关键字，self的含义就会变化<br/>
* 在<code>class内部</code>，self代表的是<code>当前这个类本身</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="n">a</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">self</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">a</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="n">A</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>而通过<code>def</code>进入方法以后，（在方法内部写的）self指的是<code>这个方法的当前调用者</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="n">a</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">x</span>
</span><span class='line'>    <span class="nb">p</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">x</span>
</span><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">a</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="c1">#&lt;A:0x00000002705fb0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上所示，这次打印出来的self是类A的一个实例而不是类A本身</p>

<p>这两个原则非常重要，现在我们看看方法前加self是什么意思</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="n">a</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">x</span>
</span><span class='line'>    <span class="nb">p</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">x</span>
</span><span class='line'><span class="n">A</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">x</span>
</span><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">a</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="n">A</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">7</span><span class="ss">:in</span> <span class="sb">`&lt;main&gt;&#39;: undefined method `</span><span class="n">x</span><span class="err">&#39;</span> <span class="k">for</span> <span class="c1">#&lt;A:0x00000001a83f58&gt; (NoMethodError)</span>
</span></code></pre></td></tr></table></div></figure>


<p>显然，这个方法看起来像是我们常说的“类方法”而不是实例方法（这个例子中，实例方法x不存在，于是抛出了异常），我们通常这么理解——</p>

<blockquote><p>方法前的self在class内部，所以它表示类A，这样，x方法的调用者是<strong>类A自身</strong>（而不是它的实例），根据之前的原则，在def关键字内部，self表示的是这个方法的调用者，在这里就是类A自己</p></blockquote>

<p>最后补充一下——<br/>
* ruby中的类本身也是对象，所以所谓“类方法”是个不太准确的描述，所有的方法都是属于某个对象的，这里的self.x其实是类A（<strong>再次强调：是A自己而不是A的实例</strong>）的“专有方法”，更进一步的理解要结合对eigenclass这个概念的理解</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何求素数(2)]]></title>
    <link href="http://fsword.github.com/blog/2012/06/10/ru-he-qiu-su-shu-2/"/>
    <updated>2012-06-10T17:30:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/06/10/ru-he-qiu-su-shu-2</id>
    <content type="html"><![CDATA[<p>前一篇我们给出了筛法求素数的基本代码，但是针对比较大的数据量，运算速度难以接受。我们观察到运算资源并不饱和，浪费了CPU。简单的改进方式是变为并行计算，用多线程提高本机并行能力，如果以后有网络，还可以分布到不同机器节点上。<br/>
要做到并行计算，首先要分析算法中哪些环节可以并行，哪些步骤要顺序执行。回头看筛法的计算过程，主要工作包括两个：选择除数和用除数过滤数列。选择除数是从小到大顺序进行，不能并行，而用除数过滤数列则是各自独立，所以能够并行。<br/>
我们并行的方式来变换原来的算法。大致思路如下——</p>

<pre><code>1. 生成待过滤的数列
2. 根据并行数目将数列均匀切分，得到若干子数列
3. 从小到大循环除数，对每一个除数
    3.1. 并行同时过滤上述多个子数列
    3.2. 过滤N的平方根后停止循环
4. 连接所有子数列，输出最后的结果
</code></pre>

<p>这么做有个问题，我们切分数列的目的是为了在过滤时充分利用并行能力，但是在若干次过滤后，子数列将陆续被过滤完毕，所以并行计算单元（线程、机器节点等）会逐渐无用，要避免这种情况，应该在每次遇到子数列过滤完毕的时候重新切分数列。<br/>
最后的代码应该是这样</p>

<div><script src='https://gist.github.com/2905122.js'></script>
<noscript><pre><code>def prime n

  full_list = (2..n).to_a
  prime_list = []
  stop_index = (n ** 0.5).floor
  last_prime = 2
  
  while(last_prime &lt; stop_index)
    workers = split_range(n-1,num){ |range| Worker.new(full_list(range)) }

    last_prime = sublists.first.reduce() do |sum, i|
      break i if i &gt; stop_index
      workers.each{|cell| worker.filter_by(i)}
      i
    end
    prime_list = prime_list.concat(workers.first.value)
    full_list = workers[1..-1].map(&amp;:value).flatten
  end
  prime_list.concat(full_list.flatten)
end

def split_range total_num, concurrent_num
  # 将传入的总数分解为若干个首尾相连的 range ，range 个数为 concurrent_num 
end

class Worker
  # 分配独立的并行计算单元（例如线程），然后对给定资源执行 map 函数
end</code></pre></noscript></div>


<p>执行结果：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby prime_benchmark.rb 
</span><span class='line'>    user     system      total        real
</span><span class='line'>    10000   0.050000    0.000000   0.050000 (  0.048889)
</span><span class='line'>    100000  0.650000    0.000000   0.650000 (  0.649779)
</span><span class='line'>    1000000 39.810000   0.050000  39.860000 ( 39.961506</span></code></pre></td></tr></table></div></figure>


<p>在我的4核机器上改进很明显。</p>

<p><code>注意：之前的代码还有一个遗留问题，被过滤掉的数字其实不用再来做除数，而现在这个版本因为要重新切分数列，所以有机会减少这个浪费，这也是速度明显提升的原因</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何求素数(1)]]></title>
    <link href="http://fsword.github.com/blog/2012/06/09/ru-he-qiu-su-shu/"/>
    <updated>2012-06-09T11:08:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/06/09/ru-he-qiu-su-shu</id>
    <content type="html"><![CDATA[<p>学习语言的过程是比较枯燥的，不过我们可以拿来做一些有趣的事情，在解决具体问题的过程中熟悉语言。<br/>
例如我们可以来练习一下这个问题</p>

<h3>找出小于N所有素数</h3>

<p>首先复习一下学校里的知识——</p>

<ul>
<li>素数（也称质数），指的是一类大于1的自然数，这些自然数有个特点，除了1和它自身，它们不能被其它的任何自然数整除。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>举例：  
</span><span class='line'>    4不是素数，因为它可以被2整除；  
</span><span class='line'>    11是素数，因为除了1和它自身，它不能被其它自然数整除；</span></code></pre></td></tr></table></div></figure>


<ul>
<li>判断一个数是否是素数，最直接的方法就是检查所有大于2小于它的自然数能否被它整除，更进一步，最大除数只要达到N的平方根就行了</li>
</ul>


<p>根据上述知识，我们可以找到问题的解决思路。方法如下：</p>

<pre><code>1. 将N以内的所有整数列出来
2. 标出序列中的第一个素数（比如：2），然后将后续中能够被这个素数整除的成员删除
3. 对新的序列重复执行上述步骤，循环进行，循环次数不大于N的平方根
</code></pre>

<blockquote><p>上述解法其实是这个问题最古老（可能也是最高效）的方法——“<a href="http://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95">筛法</a>(<a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of Eratosthenes</a>)”，是由古希腊数学家埃拉托斯特尼发明的</p></blockquote>

<p>根据这些知识，我们可以写出ruby版的实现</p>

<div><script src='https://gist.github.com/2896832.js'></script>
<noscript><pre><code>def prime n
  list = (2..n).to_a
  (2...(n ** (0.5)).floor).each do |i|  list.delete_if{|e| e &gt; i &amp;&amp; e % i == 0} end
  list
end</code></pre></noscript></div>


<p>执行一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">00</span><span class="mi">8</span> <span class="o">&gt;</span> <span class="n">prime</span> <span class="mi">100</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">97</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>成功!<br/>
是不是很简单？但是且慢，算出来需要多久呢？要是几百万以内的素数，又需要多长时间呢？<br/>
写一段代码验证一下（我们计算结束后不输出，这是为了避免大量数据输出对IO的压力）</p>

<div><script src='https://gist.github.com/2899473.js'></script>
<noscript><pre><code>require &#39;./prime.rb&#39; # user defined function
require &#39;benchmark&#39;

Benchmark.bm do |x| 
  (4..6).each do |i|
     x.report(10**i){ prime(10**i).last }
  end
end</code></pre></noscript></div>


<p>执行结果（修改了一下格式）——</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ruby prime_benchmark.rb
</span><span class='line'>       user      system       total        real
</span><span class='line'>       10000     0.020000     0.000000   0.020000   <span class="o">(</span>  0.024682<span class="o">)</span>
</span><span class='line'>       100000    1.410000     0.010000   1.420000   <span class="o">(</span>  1.419806<span class="o">)</span>
</span><span class='line'>       1000000   245.320000   0.060000   245.380000 <span class="o">(</span>246.231597<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>从10万到100万，耗时增加了200倍!!! 检查load和CPU占用率，发现load不高，但是有一个cpu核心占用率100%，这说明cpu的计算能力没有得到平衡使用，这个问题我们下一阶段解决</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Class/Module的讨论]]></title>
    <link href="http://fsword.github.com/blog/2012/06/02/guan-yu-class-slash-modulede-tao-lun/"/>
    <updated>2012-06-02T11:46:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/06/02/guan-yu-class-slash-modulede-tao-lun</id>
    <content type="html"><![CDATA[<p>Ruby China 上有人提了一个问题：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Test &lt; Module; end
</span><span class='line'>test = Test.new
</span><span class='line'>
</span><span class='line'>test到底是个神马玩意？</span></code></pre></td></tr></table></div></figure>


<p>这个问题的回答首先要看看Ruby的对象/类层次设计，如下图（ &lt;= 表示泛化，&lt;- 表示继承）：</p>

<pre><code>user_instance &lt;= UserClass &lt; Class &lt; Module &lt; Object &lt; BasicObject
                             |  |      |         |
                             |   &lt;=====          |
                              &lt;==================
</code></pre>

<p>显然，Class是Module的子类，所以一般由用户创建的class都是Class的实例，也就是Module的实例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="k">class</span> <span class="nc">A</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="n">A</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Class</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="n">A</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Module</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>但如果一个类继承了 Class或者Module，那么它理论上应该是Class/Module的子类，其实例才是Class/Module的实例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="k">class</span> <span class="nc">A</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="k">class</span> <span class="nc">X</span> <span class="o">&lt;</span> <span class="no">Module</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="n">A</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Module</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">004</span> <span class="o">&gt;</span> <span class="n">X</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Module</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里有个不太好理解的地方，X本身是继承了Module，所以是Module的子类，但是它又是用class关键字创建的，所以它还是Class的实例，换句话说，X和X.new都是Module的实例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="n">X</span><span class="o">.</span><span class="n">is_a?</span> <span class="no">Module</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，合理的推论是，如果用户定义一个类是继承自Class，也会出现上述的情况，不过这一点从语法上已经被排除了——ruby禁止直接继承Class，可是并不反对继承Class的父类Module，这就是导致这个问题复杂的原因</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby元编程读书笔记]]></title>
    <link href="http://fsword.github.com/blog/2012/05/31/rubyyuan-bian-cheng-du-shu-bi-ji/"/>
    <updated>2012-05-31T21:14:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/05/31/rubyyuan-bian-cheng-du-shu-bi-ji</id>
    <content type="html"><![CDATA[<p>本文记录在《ruby 元编程》这本书中学到的一些知识点。</p>

<h1>对象模型</h1>

<h2>class 关键字</h2>

<p>这个关键字更象是一个作用域操作符而不是类型声明语句，它的核心任务是将代码带到类的上下文中，可以从这个角度理解 <code>open class</code></p>

<h2>模块的实现</h2>

<p>以下面的代码为例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">X</span><span class="p">;</span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span>   <span class="nc">A</span>
</span><span class='line'>    <span class="kp">include</span> <span class="n">X</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span>  <span class="nc">B</span> <span class="o">&lt;</span> <span class="n">A</span><span class="p">;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际情况下，ruby 将生成一个匿名类来封装模块 X ，在最终的继承链上，这个匿名类将在包含 X 的类 A 之上，这样，类 B 的继承链就是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>B &lt; A &lt; X<span class="o">(</span>shadow<span class="o">)</span> &lt; Object &lt; Kernel<span class="o">(</span>shadow<span class="o">)</span> &lt; BasicObject
</span></code></pre></td></tr></table></div></figure>


<h6>* 以上细节在 superclass 这个 api 上反映不出来，不过每个类可以调用自己的 ancestors 方法看到细节</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="n">p194</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="nb">String</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="o">[</span><span class="nb">String</span><span class="p">,</span> <span class="no">Comparable</span><span class="p">,</span> <span class="no">Object</span><span class="p">,</span> <span class="no">Kernel</span><span class="p">,</span> <span class="no">BasicObject</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h6>* 多个 include 的情况</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">X</span><span class="p">;</span><span class="k">end</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Y</span><span class="p">;</span><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span>   <span class="nc">A</span>
</span><span class='line'>    <span class="kp">include</span> <span class="n">X</span>
</span><span class='line'>    <span class="kp">include</span> <span class="n">Y</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span>  <span class="nc">B</span> <span class="o">&lt;</span> <span class="n">A</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">B</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">B</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="no">Object</span><span class="p">,</span> <span class="no">Kernel</span><span class="p">,</span> <span class="no">BasicObject</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sinatra-contrib没有自动装载]]></title>
    <link href="http://fsword.github.com/blog/2012/05/09/sinatra-contribmei-you-zi-dong-zhuang-zai/"/>
    <updated>2012-05-09T18:53:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/05/09/sinatra-contribmei-you-zi-dong-zhuang-zai</id>
    <content type="html"><![CDATA[<p>最近写代码是基于sinatra的，遇到了一点小问题<br/>
在Gemfile中添加了sinatra和sinatra-contrib，但是实际使用中，sinatra-contrib没有被装入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Gemfile</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sinatra-contrib&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>解决的办法是在启动脚本里面手工加上一行require</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;bundler&quot;</span>
</span><span class='line'><span class="no">Bundler</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:default</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra/contrib&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这个方式有点土，其实如果换用新版的bundle就可以自动处理了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gem</span> <span class="n">update</span> <span class="n">bundle</span>
</span><span class='line'><span class="no">Updating</span> <span class="n">installed</span> <span class="n">gems</span>
</span><span class='line'><span class="no">Updating</span> <span class="n">bundler</span>
</span><span class='line'><span class="no">Fetching</span><span class="p">:</span> <span class="n">bundler</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="n">gem</span> <span class="p">(</span><span class="mi">100</span><span class="sx">%)</span>
</span><span class='line'><span class="sx">    Successfully installed bundler-1.1.3</span>
</span><span class='line'><span class="sx">    Updating rubygems-bundler</span>
</span><span class='line'><span class="sx">    Fetching: rubygems-bundler-0.9.2.gem (100%)</span>
</span><span class='line'>    <span class="no">Building</span> <span class="n">native</span> <span class="n">extensions</span><span class="o">.</span>  <span class="no">This</span> <span class="n">could</span> <span class="n">take</span> <span class="n">a</span> <span class="k">while</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="no">Successfully</span> <span class="n">installed</span> <span class="n">rubygems</span><span class="o">-</span><span class="n">bundler</span><span class="o">-</span><span class="mi">0</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span>
</span><span class='line'>    <span class="no">Gems</span> <span class="n">updated</span><span class="p">:</span> <span class="n">bundler</span><span class="p">,</span> <span class="n">rubygems</span><span class="o">-</span><span class="n">bundler</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要说明的是，bundler1.1目前在网站上写的还是 coming soon，不过新功能还是值得尝试的<br/>
顺便附上 <a href="https://github.com/carlhuda/bundler/blob/master/CHANGELOG.md">bundler 的 changlog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[active record错误汇总]]></title>
    <link href="http://fsword.github.com/blog/2012/05/04/active-recordcuo-wu-hui-zong/"/>
    <updated>2012-05-04T14:25:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/05/04/active-recordcuo-wu-hui-zong</id>
    <content type="html"><![CDATA[<p>这个帖子专门记录一些使用active record时遇到的错误<br/>
1. 错误描述：directive找不到自己的template<br/>
错误代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Directive</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:template</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;DirectiveTemplate&#39;</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">create_table</span> <span class="s2">&quot;directives&quot;</span><span class="p">,</span> <span class="ss">:force</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">integer</span>  <span class="s2">&quot;directive_template_id&quot;</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>解释：这段代码本身并没有错误，问题是建立directives表的时候给字段命名为 directive_template_id。事实上，active record使用关联对象的外键，是根据field名称来进行的，它和设置的class_name，所以ar会根据directive对象的template_id字段查找关联的template<br/>
解决方法：更改数据库字段名，或者在模型代码中指定foreign_key</p>

<ol>
<li>错误描述：db:seed_fu 创建模型遇到表结构错误<br/>
解释：初步试验发现，如果执行 <code>rake db:create db:migrate db:seed_fu</code> 会遇到这个问题，而将seed_fu单独执行则是正常的，考虑到发生错误的表在migrate阶段有过结构变更，估计是数据库事务导致alter语句没有提交，从而使得seed_fu失败</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant使用步骤总结]]></title>
    <link href="http://fsword.github.com/blog/2012/04/26/vagrantshi-yong-bu-zou-zong-jie/"/>
    <updated>2012-04-26T01:04:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/04/26/vagrantshi-yong-bu-zou-zong-jie</id>
    <content type="html"><![CDATA[<p>使用vagrant把AppOSS的项目环境打了一个包，这个东西确实很适合统一开发环境，总结一下过程吧。</p>

<p><strong>基于base.box或者某个os的iso文件建立基础系统环境，相关命令为</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant add base &lt;base box url&gt;
</span><span class='line'>cd &lt;your rails project&gt;
</span><span class='line'>vagrnat init base
</span><span class='line'>vagrant up</span></code></pre></td></tr></table></div></figure>


<p><strong>调整系统环境，相关命令为</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant ssh
</span><span class='line'>curl -L get.rvm.io | bash -s stable</span></code></pre></td></tr></table></div></figure>


<p><strong>将调整过的环境打包为新的base文件，以备将来使用，相关命令为</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant package --output base-ubuntu-rvm.box</span></code></pre></td></tr></table></div></figure>


<p><strong>修改Vagrantfile，添加puppet支持，相关内容为</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Vagrantfile
</span><span class='line'>config.vm.provision :puppet do |puppet|
</span><span class='line'>  puppet.manifests_path = "manifests"
</span><span class='line'>  puppet.manifest_file  = "ubuntu.pp"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><strong>将项目依赖的软件包（例如：libxml2-dev，libmysqlclient-dev之类），通过puppet安装好，相关命令为</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant reload</span></code></pre></td></tr></table></div></figure>


<p><strong>重新打包为box文件，这就是可以重复使用的项目环境了</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant package --output apposs-center.box</span></code></pre></td></tr></table></div></figure>


<p>说明：<br/>
1. 对于团队协作而言，如果环境有了变化，重复5、6两步即可 <br/>
2. 将rvm放在自己定制的base中是考虑到其它项目也会用到rvm，原则上，项目专用的环境通过puppet进行统一，各项目都有的环境使用同一个base box来解决<br/>
3. ruby项目通过bundle管理的gem包，可以采用下面的命令进行安装，这样可以减少内外系统的重复文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install --path ./vendor/bundle</span></code></pre></td></tr></table></div></figure>


<p>这个做法是来自saberma同学，原文在此： http://saberma.me/linux/2011/03/03/vagrant-virtual-develop-enviroment.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant环境]]></title>
    <link href="http://fsword.github.com/blog/2012/04/25/vagranthuan-jing/"/>
    <updated>2012-04-25T11:34:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/04/25/vagranthuan-jing</id>
    <content type="html"><![CDATA[<p>vagrant是一个基于Virtual Box的ruby工具库，它可以很简单的管理你的开发和运行环境
官方网站：http://vagrantup.com/</p>

<p>今天准备了一个干净的运行环境，步骤如下：</p>

<p><strong> 修改locale </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi /etc/default/locale #将 LANG 改为 zh_CN.utf8
</span><span class='line'>sudo locale-gen zh_CN.utf8</span></code></pre></td></tr></table></div></figure>


<p><strong> 安装必要的本地库 </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install mysql-server libmysqlclient-dev git
</span><span class='line'>sudo apt-get install libxslt-dev libxml2-dev</span></code></pre></td></tr></table></div></figure>


<p><strong> 用rvm安装ruby </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L get.rvm.io | bash -s stable
</span><span class='line'>source .bashrc
</span><span class='line'>rvm pkg install zlib
</span><span class='line'>rvm pkg install readline
</span><span class='line'>rvm pkg install openssl
</span><span class='line'>rvm install ruby-1.9.3</span></code></pre></td></tr></table></div></figure>


<p><strong>进入 /vagrant 目录，准备rails环境</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake db:create db:migrate
</span><span class='line'>rails s</span></code></pre></td></tr></table></div></figure>


<p>后续结合puppet来进行环境管理</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让bash提示符显示彩色的git_branch]]></title>
    <link href="http://fsword.github.com/blog/2012/04/17/rang-bashti-shi-fu-xian-shi-cai-se-de-git-branch/"/>
    <updated>2012-04-17T16:06:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/04/17/rang-bashti-shi-fu-xian-shi-cai-se-de-git-branch</id>
    <content type="html"><![CDATA[<p>之前一直很羡慕zsh用户，今天终于让bash也能显示彩色branch了
具体做法：修改你的 .bashrc，添加下面几句就可以了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>parse_git_branch() {
</span><span class='line'>  git branch 2&gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/[\1]/'
</span><span class='line'>}                    
</span><span class='line'>_PS1=$PS1                                                 
</span><span class='line'>PS1="\[\e[36m\]\u:\[\e[32m\]\w\[\e[33m\]\$(parse_git_branch)\[\e[0m\]\$ "</span></code></pre></td></tr></table></div></figure>


<p>                                                     <br/>
很简单，不过之前遇到了点麻烦：添加了彩色支持以后发现对较长的命令行会显示错误，后来发现是把<code>\[\e[36m\]</code>写成了 <code>\[\e[36m</code>（丢了后面的部分），汗</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过drb集成java和ruby环境]]></title>
    <link href="http://fsword.github.com/blog/2012/03/08/tong-guo-drbji-cheng-javahe-rubyhuan-jing/"/>
    <updated>2012-03-08T23:51:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/03/08/tong-guo-drbji-cheng-javahe-rubyhuan-jing</id>
    <content type="html"><![CDATA[<p>ruby在很多方面都很不错，但是java也有它的优势，至少我们有很多基于java的遗留系统。<br/>
结合这两者主要有几种思路：<br/>
* 使用消息系统链接java应用和ruby应用，这是我们通常整合异构系统的思路<br/>
* 基于java的分布式设施进行系统整合，这要将ruby放在jvm上工作，我们可以用jruby on rails<br/>
* 基于ruby的 drb 技术进行系统整合，我们同样需要借助 jruby 让java系统看起来象 ruby<br/>
前两个不用举例，最后一个给一个简单的示例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># server.rb
</span><span class='line'>require 'drb'
</span><span class='line'>
</span><span class='line'>DRb.start_service('druby://localhost:9000', self)</span></code></pre></td></tr></table></div></figure>


<p>以上的代码如果在 rails console 上执行，就可以使用如下代码进行远程调用了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># client
</span><span class='line'>require 'drb'
</span><span class='line'>
</span><span class='line'>DRb.start_service
</span><span class='line'>this = DRbObject.new(nil, 'druby://localhost:9000')
</span><span class='line'>
</span><span class='line'>this.class_eval 'Rails.application.config.root'</span></code></pre></td></tr></table></div></figure>


<p>Have fun!</p>
]]></content>
  </entry>
  
</feed>
