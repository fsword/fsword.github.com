<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[fsword's blog]]></title>
  <link href="http://fsword.github.com/atom.xml" rel="self"/>
  <link href="http://fsword.github.com/"/>
  <updated>2014-11-03T08:18:26+08:00</updated>
  <id>http://fsword.github.com/</id>
  <author>
    <name><![CDATA[fsword]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[多级module避免使用双冒号]]></title>
    <link href="http://fsword.github.com/blog/2014/10/04/duo-ji-module-bi-mian-shi-yong-shuang-mou-hao/"/>
    <updated>2014-10-04T11:48:00+08:00</updated>
    <id>http://fsword.github.com/blog/2014/10/04/duo-ji-module-bi-mian-shi-yong-shuang-mou-hao</id>
    <content type="html"><![CDATA[<p>在多层模块中定义类或者模块一般有两种做法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">A</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">B</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>和</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">A::B</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>直观看，后者显然要简洁一些，所以我们常常使用这种写法，不过，其实后者更灵活。</p>

<p>这两种写法并不是等价的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">A</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">B</span>
</span><span class='line'>    <span class="no">Sth</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">module</span> <span class="nn">A</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">B</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">C</span>
</span><span class='line'>      <span class="k">class</span> <span class="nc">X</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="no">Sth</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="ss">A</span><span class="p">:</span><span class="ss">:B</span><span class="o">::</span><span class="ss">C</span><span class="p">:</span><span class="ss">:X</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hello</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行上述代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">sample</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="n">hello</span>
</span></code></pre></td></tr></table></div></figure>


<p>改为双冒号：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">A</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">B</span>
</span><span class='line'>    <span class="no">Sth</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">module</span> <span class="nn">A::B::C</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">X</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="no">Sth</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="ss">A</span><span class="p">:</span><span class="ss">:B</span><span class="o">::</span><span class="ss">C</span><span class="p">:</span><span class="ss">:X</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hello</span>
</span></code></pre></td></tr></table></div></figure>


<p>再执行就会出错了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">sample</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="n">v</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">9</span><span class="ss">:in</span> <span class="sb">`hello&#39;: uninitialized constant A::B::C::X::Sth (NameError)</span>
</span><span class='line'><span class="sb">    from v.rb:15:in `</span><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你感觉奇怪，说明对ruby的语法理解的还不充分。初学者常以为module和class这两个关键字是&#8221;<code>定义</code>一个类/模块&#8221;，但其实它们的意思是&#8221;<code>打开</code>一个类/模块&#8221;（正是这一特性让ruby具备了open class的能力），而对于<code>打开</code>这个概念，随之而来的自然是可以访问这个类/模块上下文的各种常量。</p>

<p>在前一种写法中，我们实际上是在<code>依次打开</code>模块A、B、C，因此X可以访问这些模块中的常量，而<code>module A::B::C</code>这种写法只是打开了<code>A::B::C</code>这个模块，于是X就不能访问 A::B 这个模块的常量了。</p>

<p>module中的常量，通常是一些模块级的共享对象和数据，因此，为了让我们的代码能够访问这些位置，写成层次module显然比使用双引号的代码更有灵活性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义ruby异常时需要注意的一个问题]]></title>
    <link href="http://fsword.github.com/blog/2014/08/15/zi-ding-yi-rubyyi-chang-shi-xu-yao-zhu-yi-de-yi-ge-wen-ti/"/>
    <updated>2014-08-15T12:12:00+08:00</updated>
    <id>http://fsword.github.com/blog/2014/08/15/zi-ding-yi-rubyyi-chang-shi-xu-yao-zhu-yi-de-yi-ge-wen-ti</id>
    <content type="html"><![CDATA[<p>有时我们会有这样的场景，对于依次调用的函数 A 、B、 C，存在这样的职责：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A [处理指定异常类]
</span><span class='line'>    -----&gt; B[转换异常类] 
</span><span class='line'>                -----&gt; C[抛出原始异常]</span></code></pre></td></tr></table></div></figure>


<p>有人会写出这样的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">WrappedError</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">def</span> <span class="nf">first</span>
</span><span class='line'>  <span class="n">second</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">WrappedError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">: </span><span class="se">\n</span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">join</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">second</span>
</span><span class='line'>  <span class="n">third</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">StandardError</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="c1"># do some things</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">WrappedError</span><span class="o">.</span><span class="n">new</span> <span class="n">e</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">third</span>
</span><span class='line'>  <span class="nb">fail</span> <span class="s1">&#39;I am wrong&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">first</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个写法有两个错误：</p>

<ul>
<li>java的异常类通常会在构造器方法里传入root cause对象，但ruby不需要，它可以直接从 $! 上得到，所以 <code>WrappedError.new e</code>其实多余。</li>
<li>ruby的异常经过包装后就不会在backtrace中输出之前的root cause信息，不过异常对象有cause属性可以用来访问，所以在first函数里应该这么写——</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="s2">: </span><span class="se">\n</span><span class="si">#{</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">cause</span><span class="o">||</span><span class="n">e</span><span class="p">)</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">join</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[编译]ubuntu下自定义用户目录]]></title>
    <link href="http://fsword.github.com/blog/2014/05/26/ubuntuxia-zi-ding-yi-yong-hu-mu-lu/"/>
    <updated>2014-05-26T12:48:00+08:00</updated>
    <id>http://fsword.github.com/blog/2014/05/26/ubuntuxia-zi-ding-yi-yong-hu-mu-lu</id>
    <content type="html"><![CDATA[<p>内容来源： <a href="https://blog.dbrgn.ch/2010/5/21/fix-ubuntu-user-directories-desktopmusictemplates-etc/">链接</a></p>

<p>有的linux桌面(例如ubuntu/xbuntu)会按照xdg-user-dirs规范将一些目录作为缺省目录(例如 Desktop, Music, Pictures, Templates 等等)，这些内容是可以自己修改和维护的，配置文件在 ~/.config/user-dirs.dirs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># This file is written by xdg-user-dirs-update
</span><span class='line'># If you want to change or add directories, just edit the line you're
</span><span class='line'># interested in. All local changes will be retained on the next run
</span><span class='line'># Format is XDG_xxx_DIR="$HOME/yyy", where yyy is a shell-escaped
</span><span class='line'># homedir-relative path, or XDG_xxx_DIR="/yyy", where /yyy is an
</span><span class='line'># absolute path. No other format is supported.
</span><span class='line'>#
</span><span class='line'>XDG_DESKTOP_DIR="$HOME/Desktop"
</span><span class='line'>XDG_DOWNLOAD_DIR="$HOME/Downloads"
</span><span class='line'>XDG_TEMPLATES_DIR="$HOME/Templates"
</span><span class='line'>XDG_PUBLICSHARE_DIR="$HOME/Public"
</span><span class='line'>XDG_DOCUMENTS_DIR="$HOME/Documents"
</span><span class='line'>XDG_MUSIC_DIR="$HOME/Music"
</span><span class='line'>XDG_PICTURES_DIR="$HOME/Pictures"
</span><span class='line'>XDG_VIDEOS_DIR="$HOME/Videos"</span></code></pre></td></tr></table></div></figure>


<p>关于这些 xdg user dirs ，更详细的信息参见<a href="http://www.freedesktop.org/wiki/Software/xdg-user-dirs">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[process info函数参数]]></title>
    <link href="http://fsword.github.com/blog/2014/05/26/process-infohan-shu-can-shu/"/>
    <updated>2014-05-26T11:38:00+08:00</updated>
    <id>http://fsword.github.com/blog/2014/05/26/process-infohan-shu-can-shu</id>
    <content type="html"><![CDATA[<p>今天想查一下erlang:process_info函数的参数，余锋同学给了一个<a href="https://github.com/ferd/recon/blob/master/src/recon.erl">链接</a>，结果看到了<a href="https://github.com/ferd/recon">recon</a> 这个项目，感觉很值得关注，记录一下。</p>

<p>不过，如果只是了解process_info函数有哪些key，可以直接用这种方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>(server@127.0.0.1)32&gt; erlang:process_info(pid(0,1286,0)           
</span><span class='line'>(server@127.0.0.1)32&gt; ).
</span><span class='line'>[{registered_name,channel@1},
</span><span class='line'> {current_function,{gen_fsm,loop,7}},
</span><span class='line'> {initial_call,{proc_lib,init_p,5}},
</span><span class='line'> {status,waiting},
</span><span class='line'> {message_queue_len,0},
</span><span class='line'> {messages,[]},
</span><span class='line'> {links,[&lt;0.1163.0&gt;]},
</span><span class='line'> {dictionary,[{'$ancestors',[essh_client_sup,essh_sup,
</span><span class='line'>                             &lt;0.1103.0&gt;]},
</span><span class='line'>              {'$initial_call',{essh_client,init,1}}]},
</span><span class='line'> {trap_exit,false},
</span><span class='line'> {error_handler,error_handler},
</span><span class='line'> {priority,normal},
</span><span class='line'> {group_leader,&lt;0.1102.0&gt;},
</span><span class='line'> {total_heap_size,17730},
</span><span class='line'> {heap_size,6772},
</span><span class='line'> {stack_size,10},
</span><span class='line'> {reductions,15053},
</span><span class='line'> {garbage_collection,[{min_bin_vheap_size,46422},
</span><span class='line'>                      {min_heap_size,233},
</span><span class='line'>                      {fullsweep_after,65535},
</span><span class='line'>                      {minor_gcs,1}]},
</span><span class='line'> {suspending,[]}]</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZZ：也谈坐月子的问题]]></title>
    <link href="http://fsword.github.com/blog/2014/05/18/zz%3Aye-tan-zuo-yue-zi-de-wen-ti/"/>
    <updated>2014-05-18T22:04:00+08:00</updated>
    <id>http://fsword.github.com/blog/2014/05/18/zz:ye-tan-zuo-yue-zi-de-wen-ti</id>
    <content type="html"><![CDATA[<p>◇◇新语丝(www.xys.org)(xys5.dxiong.com)(www.xinyusi.info)(xys2.dropin.org)◇◇</p>

<p>　　也谈坐月子的问题</p>

<p>　　作者：王永祯</p>

<p>　　方舟子先生“中国人坐月子的陋习”一文，所述事实符合实际，分析批判正
确。为什么却招徕了一片骂声？</p>

<p>　　60年代，我是乡级医院的一名医生。对农村生孩子，坐月子，实在是太熟悉
了。因为坐月子，对产妇母子的伤害见的太多了。</p>

<p>　　说一个我亲身经历的真实故事吧：</p>

<p>　　某产妇生小孩，由我院接生员接生，生产很顺利。本来无事。可是两天后，
我们的接生员突然来找我，“王大夫你快去看看吧，孩子发高烧，母亲也象昏迷
的样子”。我于是背起出诊包，急忙赶到孕妇家。一近产妇的房间，屋内有几个
邻居的老太太，象在照料病人，表情沉重。母子都昏昏然，经检查，除孩子体温
接近40℃外，没有任何有产期感染迹象。时值三伏高温季节，屋子门窗紧闭，孩
子还用棉被包裹，屋内凭感觉，室温估计会接近40℃，空气也相当不好。我全明
白了。我告诉在场的人：我看不出来孩子和母亲有什么病，屋子太热了。于是我
亲自动手，解除了孩子包身的棉被，打开了屋子的窗户，并要求母亲只穿内衣，
勿盖棉被。我的举措，可谓大逆不道，令在场的人目瞪口呆。可他们不敢对我进
行阻拦。过一会，效果显现了，孩子体温降下来了，母亲也精神好转。在场的所
有人都松了一口气。我也轻松地离开了产妇家。</p>

<p>　　这样的故事，决不是虚构，可以讲很多。</p>

<p>　　我已不在农村，据说还有这种陋习。</p>

<p>(XYS20110717)</p>

<p>◇◇新语丝(www.xys.org)(xys5.dxiong.com)(www.xinyusi.info)(xys2.dropin.org)◇◇</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZZ：也说坐月子]]></title>
    <link href="http://fsword.github.com/blog/2014/05/18/zz%3Aye-shuo-zuo-yue-zi/"/>
    <updated>2014-05-18T21:53:00+08:00</updated>
    <id>http://fsword.github.com/blog/2014/05/18/zz:ye-shuo-zuo-yue-zi</id>
    <content type="html"><![CDATA[<p>◇◇新语丝(www.xys.org)(xys2.dxiong.com)(www.xysforum.org)(xys-reader.org)◇◇</p>

<p>　　也说“坐月子”</p>

<p>　　作者：星期二</p>

<p>　　看到新语丝上小木的《关于“坐月子”的一点个人体会》，也想起我当年坐
月子的时候的一些事情。</p>

<p>　　中国坐月子的老习惯，不能出门是一定的了。这条对我来说并非不可忍受，
毕竟当时身体虚弱，而且那时候是冬天，不出门也就罢了。更多让人受不了的习
俗包括：不能洗头，不能洗澡，不能刷牙，不能剪手指甲等等。这些当时给我带
来很大的困扰。</p>

<p>　　首先说不能剪指甲，理由是剪了手指甲将来会手疼。但是我要照顾孩子，一
个新生儿皮肤很嫩，一个月不剪指甲的话，早不知道划伤小宝宝多少次了。所以
这条我压根就没理会，很快就剪了手指甲。好在这一条我母亲和婆婆也不是特别
信，就由得我了。</p>

<p>　　其次是一个月不能洗头，理由是月子里洗头将来会头疼。我本来就是油性头
发，三天不洗头的话，头发就会油腻，而且头发一脏，就很容易掉头发。忍了一
个星期之后，看着枕头上的落发，头皮一阵阵瘙痒，我开始脾气暴躁，有时候会
一边骂骂咧咧一边又抓又打自己的头。老公和婆婆迫于我的“任性”，终于同意
给我洗头。但是婆婆说一定要用熟水，也就是把烧开的水晾着，晾温了再洗，而
不能用凉水兑热水。所以后来也洗了头。但我也实在等不及把开水冷温了，所以
也就兑了凉水洗。</p>

<p>　　关于刷牙也是一样，一开始我母亲婆婆和其他的三姑六婆们都告诉我不能刷
牙。后来在我的坚持下各人退了一步，同意我刷牙，但是用的是温开水。</p>

<p>　　还有不能洗澡，虽然说是冬天，但是屋里是开着暖气的，这样一个星期下来，
我身上的衬衣已经满是油水。而不能洗澡是长辈们十分坚持，绝对没有讨价还价
的余地的。母亲告诉我实在觉得脏的时候，可以用热毛巾擦一擦，然后换件衣服。
其实这种隔靴搔痒的干搓泥的方式并没有多大的清洁作用，而且身上除了油腻之
外还多了一层湿乎乎的水气，反而感觉更恶心。</p>

<p>　　中国人的坐月子简直可以说是以脏为习俗。为此，坐月子期间成了我情绪最
差的一段日子。而最有意思的是，如果你向三姑六婆抱怨这些不能洗的习俗的时
候，她们都会说：我们都是这样过来的。看得出，她们都在坐月子期间被这些习
俗弄的很辛苦，但是时过境迁，回忆那段日子，又颇有些忆苦思甜的自豪感。似
乎那些习俗是取经路上的九九八十一难，而忍住了这些肮脏的习俗捱到出了月子，
便是得成了金身正果。或许正是这种感觉，才支持着一代一代的人把这个习俗在
后辈身上发扬光大吧。</p>

<p>　　坐月子的习俗一句话概括就是：不能沾水，哪里沾水后半辈子哪里就疼痛难
忍。洗头就头疼，洗脚就脚疼，洗全身当然将来全身都疼。</p>

<p>　　那时候我也打电话和一个比较开明的姑姑聊过。最终我们达成的一致结论是，
谁也不能证明所谓的“洗哪疼哪”是真的，但是谁也不敢拿自己去做白老鼠。尽
管老外那些白人黑人们是从来不坐月子的，但是她们的体质一般来说比亚洲人要
好很多，当然不能因为美国人不坐月子就可以相信中国人不用坐月子。所以尽管
每个产褥期的妇女都很怨念，还是一代一代的坚持下来并且在后辈身上发扬光大。
其实我想不通的是，为什么同为亚洲人的日本人也不用坐月子呢？如果坐月子真
的是体质原因，为什么不是所有的亚洲人都坐月子而是只有中国人，或者说只有
华人坐月子？</p>

<p>　　其实现在的我确实有感觉，生了孩子以后的这两年，身体也是不如以前。比
如牙齿，我以前那样可以大口咬冰块吃，但是现在会觉得咬冰块牙疼。以前我会
很彪悍的在下雪的天气顶着湿漉漉刚洗好的头发出门，连帽子都不戴，头发曾经
因此冻成冰柱，而我丝毫不觉得凉，也没有感冒，令同寝室的姐妹都咋舌，现在
冬天天冷的时候我出门一定要戴帽子，不然会冻得头疼。有n多的传说都是这样
来的：某人坐月子的时候洗了哪里，后来哪里哪里疼。不知道我算不算是一个反
面典型。但真的是“洗哪疼哪”吗？这种倒推合乎逻辑吗？我也很怀疑。也许是
因为我二十来岁的时候太不爱惜自己的牙齿和头发才会到30岁反应出来，人到了
三十岁确实身体某些机能都开始走下坡路了。坐月子洗头和老来头疼，仔细想想，
其实是没有可证实的因果关系的。这样举例子的人，往往自动忽视那些月子里没
洗头老了也头疼的，和月子里洗了头老了也没头疼的人。选择性失明，这思路倒
是和中医满像的。由此不难明白中医为什么在国人中那么有市场了，因为符合国
人逻辑混乱的思维方式吧。</p>

<p>(XYS20080629)</p>

<p>◇◇新语丝(www.xys.org)(xys2.dxiong.com)(www.xysforum.org)(xys-reader.org)◇◇</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZZ：为什么坐月子是陋习]]></title>
    <link href="http://fsword.github.com/blog/2014/05/18/zz%3Awei-shi-yao-zuo-yue-zi-shi-lou-xi/"/>
    <updated>2014-05-18T21:52:00+08:00</updated>
    <id>http://fsword.github.com/blog/2014/05/18/zz:wei-shi-yao-zuo-yue-zi-shi-lou-xi</id>
    <content type="html"><![CDATA[<p>◇◇新语丝(www.xys.org)(xys5.dxiong.com)(www.xinyusi.info)(xys2.dropin.org)◇◇</p>

<p>　　　　　　　　　　　为什么坐月子是陋习？</p>

<p>　　　　　　　　　　 　　·方舟子·</p>

<p>　　古人把生日称为“母难日”，这不仅指母亲在怀孕、分娩时要忍受痛苦，而
且面临着很大的生命危险。在古代，孕产妇死亡率高达1.5%。由于一个女人一生
中通常要经历5～8次生产，这就意味着一个女人在一生中由于生产而死亡的可能
性高达九分之一。由于现代医学的进步，现在发达国家的产妇死亡率已降到万分
之一左右。</p>

<p>　　有许多原因能导致产妇死亡。有的是由于难产或分娩时大出血而当场死亡。
有的则是在产后由于感染而死亡。如果在分娩时没有进行消毒，就可能发生破伤
风。又由于产后子宫颈口处于开放状态，细菌容易进入子宫内导致子宫内膜、子
宫肌层发炎，甚至进一步通过输卵管到达盆腔，引起输卵管、卵巢、盆腔发炎。
因此产后如果不卫生，容易发生大面积感染，最终由于败血症而死亡。</p>

<p>　　严重感染时人会发高烧，发高烧时身体会打寒颤，就跟在寒风中一样。中医
不知道这是由于细菌感染引起的，以为是“伤风”、“受凉”。为了避免“伤
风”，产妇不仅要闭门不出，坐床不起，而且要紧闭门窗，密不透风。产妇还要
头戴帽子或裹毛巾，穿厚衣服，即使是大热天也必须如此。为了避免“受凉”，
产妇不能洗头、洗澡，不能沾水，连刷牙都不行。产妇也不能喝凉水、冷饮，不
能吃“凉性”食物，例如水果。</p>

<p>　　因此就形成了坐月子要忌风、忌水、忌动、忌口的习俗，而且长达一个月。
忌风、忌水不讲卫生，反而增加了细菌感染的机会，而忌动、忌口又降低了免疫
力，因此坐月子的结果反而更容易“伤风”、“受凉”。越是容易“伤风”、
“受凉”就越看重坐月子，形成了恶性循环。坐月子对产妇来说其实是很痛苦的
一件事，在夏天时尤其如此。为了逼迫产妇就范，又有了一套吓人的说法，不坐
月子或月子没做好，以后就会得“月子病”，例如头部吹了风或洗了头就会一辈
子头疼，刷了牙以后牙齿会一直酸痛，身体哪个地方沾了水哪个地方就会疼等等。</p>

<p>　　这些做法与现代医学格格不入，恰恰是对着来的。如果是在西方国家，产妇
分娩后，护士往往就给她吃冷饮。分娩当天，护士就会让产妇洗澡，而且会逼着
产妇下床运动。孕产妇体内的血液处于高凝状态，如果长时间躺着、坐着不动，
容易发生下肢静脉血栓。如果血栓随着血液流动到了肺部，栓塞肺动脉，会导致
产妇猝死，难以抢救。在发达国家，产妇由于难产、大出血或感染死亡已很少见，
最主要的死亡因素就是血栓栓塞。即使产妇老大不愿意也要逼着她们运动，就是
为了防止血栓栓塞。适当的运动也有助于产后的恢复。</p>

<p>　　西方国家的这种做法在许多中国人看来很不可思议。他们把这归结为白人的
体质比较好。且不说白人的体质未必就都比中国人好，西方国家的居民也并不都
是白人，还有黑人、印第安人、亚裔，还有很多华人，他们也都不坐月子。除了
西方国家，其他国家，包括东方国家（例如日本），也都不坐月子。难道只有在
中国的华人是世界上身体特别虚弱的特殊人种，非坐月子不可？一旦被指出了这
个事实，又有人会说，正因为外国女人不坐月子，所以她们老得快，或者老了疾
病多。好像这些人做过调查统计，发现不管哪个国家、哪个民族的女人到老都比
中国国内的女人不健康似的。</p>

<p>　　“不坐月子，别看现在没事，以后就知道厉害了。”这也是常见的说法，让
一些产妇不敢不从。也的确经常有人现身说法，说当年由于月子没做好，所以落
下了什么“月子病”。而什么病都可以归为“月子病”。我听过的一个很搞笑的
说法是，由于当年坐月子是在夏天，穿凉鞋没有包住脚后跟，所以老了脚后跟皮
肤就裂了。反正人老了甚或还没老都难免会出现各种疾病、不适，只要以前坐过
月子觉得某方面没做好，就都可以归为“月子病”。难道没有生过小孩的女人就
不会得这些病？“月子病”也可以说是一种心理疾病，是疑神疑鬼乱联想导致的，
只有那些做过月子的人才会得，不做月子的人没有这方面的心理负担，反而不会
得“月子病”。</p>

<p>　　坐月子是受中医文化影响的一种最具中国特色的传统陋习。这并不是说产妇
不需要休产假。产妇在分娩后身体出现了一些变化，适当的休息辅以合理的饮食
和锻炼，是有助于身体的复原的。更重要的是，产假有助于带好新生儿。如果因
为迷信坐月子，把自己搞得全身脏兮兮、臭烘烘的，对宝宝也不好。说了这么多，
也许还会有人问，那你的妻子敢不坐月子吗？当然敢，在医院时没有洗浴条件，
她从医院一回家就洗头洗澡，出门散步，想干嘛就干嘛。</p>

<p>　　2011.7.11.</p>

<p>（《中国青年报》2011.7.13）</p>

<p>(XYS20110713)</p>

<p>◇◇新语丝(www.xys.org)(xys5.dxiong.com)(www.xinyusi.info)(xys2.dropin.org)◇◇</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZZ：坐月子（白衣咸饭）]]></title>
    <link href="http://fsword.github.com/blog/2014/05/18/zz%3Azuo-yue-zi-%28bai-yi-xian-fan-%29/"/>
    <updated>2014-05-18T21:45:00+08:00</updated>
    <id>http://fsword.github.com/blog/2014/05/18/zz:zuo-yue-zi-(bai-yi-xian-fan-)</id>
    <content type="html"><![CDATA[<p>◇◇新语丝(www.xys.org)(xys2.dxiong.com)(www.xysforum.org)(xys-reader.org)◇◇</p>

<p>　　坐月子</p>

<p>　　作者：白衣咸饭</p>

<p>　　在我开设自己的博克后不久，有个网友希望我说说坐月子的事情。应这位网
友的要求，5月11日写了一篇“坐月子
http://blog.cat898.com/boke.asp?kurz.showtopic.160560.html”，引得了几
位网友的跟帖，谈了各地坐月子的习俗。我在发博文时，一般也同时寄给新语丝
一篇，但那时电脑被病毒感染，速度特慢，有少数没有寄过来，“坐月子”就没
有寄。今天看了小木的“关于“坐月子”的一点个人体会”
(http://www.xys.org/xys/ebooks/others/science/dajia9/zhongyi1820.txt )
和星期二的《也说“坐月子”》
（http://www.xys.org/xys/ebooks/others/science/dajia9/zhongyi1823.txt
），把这篇旧文“坐月子”修改了一下，望能使更多的人了解一下“坐月子”是
怎么回事。不过，本节和文章的最后两节是新加的。</p>

<p>　　现代医学中只有产假之说，没有坐月子之说。别看我学了这么多年，真要我
把这坐月子翻译成洋文，我还真不知道怎么译，因为这是中国特色。翻译之后得
附一串长长的说明。月子指产褥期，这个不难，关键是个“坐”字，如何处理，
如何把握，我自己都不是很准确。</p>

<p>　　以前医学不发达，产后很容易感染。 人在生产后，子宫颈口处于开放状态，
下生殖道内的细菌很容易上行感染子宫内膜，导致子宫内膜和子宫肌层发生炎症，
临床上叫子宫内膜子宫肌炎，即使是专业人员，也常常简称为子宫内膜炎。实际
上这炎症是会侵犯子宫肌层的。子宫内膜和子宫肌层感染发炎后，人就会发热。
以前把所有产妇产后发热都称为产褥热，实际上是不准确的，因为乳腺炎、肺炎
等其它原因也会引起发热。现在正规的教科书和参考书已经废除了产褥热这个名
词。</p>

<p>　　子宫内膜炎如果治疗不及时，感染灶还会继续向上蔓延，通过输卵管到达盆
腔，引起输卵管炎、卵巢炎、盆腔脓肿甚至全腹腔－盆腔腹膜炎，最后出现败血
症，导致病人死亡。以前孕产妇死亡率在1500/10万，其中，感染占了很大的比
例。现在，抗生素广泛使用之后，因产褥感染而死亡的产妇已很少见。但是产褥
感染还是时有所见。由于产褥感染时，产妇会有发热、高热、寒战，所以中医认
为产后容易“伤风”。既然会伤风，所以坐月子时不仅要头裹毛巾、身穿棉袄，
而且要紧闭门窗、密不透风。在我读大学的时候，还常常听老师提起，说有的产
妇即使三伏天坐月子，也要如此，结果搞得人中暑。中暑的产妇我没有见过，但
前几年查房时发现有患者家属把病房的门窗关得紧紧的，屋子内空气污浊，加上
产后都有点恶露，屋内的血腥味非常难闻。因此，我查房时的第一件事就是打开
窗户，把新鲜空气给患者送进屋。这个动作常常受到一些老婆婆老奶奶的阻挠和
干扰，但年轻人似乎更愿意接受医生们的意见。检验产妇是相信中医，还是相信
现代医学，脸上有无痱子，是个小小的窍门。</p>

<p>　　中医提出产后易伤风的另外一个原因，就是过去生孩子断脐时，常常用的不
是消毒剪刀，而是普通的剪刀，甚至是生锈的剪刀或切菜的刀，还有用口把脐带
咬断的，所以新生儿很容易发生破伤风。破伤风由破伤风杆菌引起，会分泌外毒
素，引起机体痉挛性抽搐，以前叫“脐风”。一旦发生，新生儿几乎没有存活的
可能。其实，这与风一点关系都没有，也是感染所致。由于破伤风杆菌到处存在，
所以以前的新生儿死亡率特高。新式接生时，破伤风感染不再存在。但在一些计
生抓得紧的地方如湖广、贵州等地，有些人为了逃避计生，就偷偷地在家里生，
结果还有新生儿患破伤风。我有个同学在内地做儿科，有次他说他一年内就接诊
了100多例破伤风患儿，几乎全是第二胎，着实把我吓了一跳。</p>

<p>　　生孩子叫分娩。分娩之后子宫创面会有少量渗液，加上红细胞、白细胞、脱
落的上皮细胞等，从阴道内流出来，医学上叫恶露。恶露中含有少量的红细胞，
所以颜色是淡红色的。加上分娩时出血，在中医看来，这些都是“失血”的表现，
所以产后要“补血”。的确，有些产妇有贫血，需要补充制造血液的原料如铁、
维生素B12，但中医建议产妇食补。所谓食补，就是通过饮食来补。比如说吃红
糖、红枣，以及一些红色的中药等等。中医认为吃下这些红色的东西，就可以补
血，其实没有什么科学依据。如果真有贫血，一般只需补充铁剂就行了。维生素
B12在食物中的含量，绝大多数情况下可以满足需要，不必特别补充。所以常常
有人问我，产后需要吃什么补什么？我的回答是什么都可以吃，补就没有必要。
结果有的老婆婆用异样的眼光看我。还有的老人在病房里故意大声教训儿媳说
“生孩子要听医生的，吃什么还得听我的”。其实这话是说给我们医生听的。</p>

<p>　　说到吃，中医有很多忌讳，但其实什么都不需要忌。比如，身上长了疖痈，
中医说要忌食南瓜、鲤鱼等所谓的“发物”。否则这些疥痈就会更加严重，会化
脓等，其实没有这回事。由于所有的水果我们都是生吃的，是冷的，所以在某些
地方产妇也不能吃。经常有产妇问我水果能不能吃，我说都能吃，但有些人就是
不信，连某些地方的医生也不信，说他们那里的老一辈教下来的规矩就是忌食凉
物。有次一位朋友的太太生孩子，我买了一些水果去看他们，朋友的岳母很不高
兴，说医生怎么也不讲究忌口，连这个都不知道？我说什么都可以吃，水果也得
吃。正当大家很尴尬时，我朋友出来圆场说我“是从瑞士回来的大博士”，才算
平息了争论，但那位老人好像还有疑虑。我们身上生疖子、长痈，与吃什么东西
一点关系都没有。不过，现在污染很重，在污染重的地区，是否还可以放心大胆
地吃蘑菇、吃鱼，的确值得商榷。但这只与环境污染程度相关，与产妇能不能吃
无关。</p>

<p>　　中医除了忌风，忌口，还要忌凉水。因此，很多人坐月子的时候不洗澡。我
还真不知道一周不洗澡，如何过得去。从现代医学的观点看，澡也是要洗的，我
们病房现在全部都装有淋浴，病人可以洗澡。但是，由于宫颈口在产后12天左右
才闭合，所以建议在这之前不要坐浴。当然，洗澡用的水不可以很冷，水和环境
的温度适宜就行。</p>

<p>　　我自己没有坐过坐月子，也没有看人坐过。小时候母亲生下我最小的弟弟妹
妹时，我已经明白了一些事。我父亲有些科学知识，而且很痛恨中医。因为我奶
奶30岁时拉肚子，郎中开的方子竟然是要她喝下自己的洗脚水，最后死于“赤
痢”。我奶奶死于庸医之手，所以我父亲一辈子不吃中药，不像我还吃过几次。
我母亲坐月子也因此没有吃过中药。我们那儿的人，在吃过中药之后，要把中药
倒在外面的路上，据说这样人的病会早点好。这更没有道理。</p>

<p>　　我母亲坐月子时，父亲会煮很多鸡蛋放在床头，母亲饿了就吃。我们家穷，
一般仅20来个。有时听说谁家的媳妇，生个孩子吃了60多个鸡蛋，估计一天得好
几个。羡慕之情，溢于言表。那时候我们常吃不饱饭，所以鸡蛋对于产妇来说，
对营养身体起了很大的作用。我们那地方的鸡蛋的吃法也很怪，都是先煮好了的。
要吃时，就加点红糖，然后用热开水冲了吃。在那时候物资匮乏的时代，觉得还
好吃。现在有不少病人给医生护士送红蛋，包装得虽然很好，但我发现几乎没有
哪个医生护士喜欢吃的。有个温州人很厉害，把巧克力做成鸡蛋形状，外面印上
红“喜喜”，像红蛋一样送人，我发现大家倒是蛮喜欢吃。</p>

<p>　　除了忌口之外，中医很讲究发奶。产后要下奶，现代医师好像从来不从饮食
上考虑，只在两个层面上考虑，一是刺激，要新生儿吸吮乳头，刺激产奶；二是
给药。国内似乎不大重视这个问题，所以没有任何药物。但国外是有的，估计是
泌乳素。这个东西是人体胎盘产的、具有泌乳作用的激素，垂体也会分泌。而中
医就不同了，以前的“发物”统统起了作用，什么鲤鱼、南瓜等等，全派上了用
场。在我老家，还得用糯米炖猪蹄、老母鸡或鲤鱼。其实，这些东西本来就是食
物，是用来吃的，不吃也没什么。这些都是高蛋白饮食，吃了之后会补充人体内
需要的氨基酸等物质，当然没有什么坏处。但没有必要刻意去吃什么、不吃什么。
所以中医对坐月子不仅有“忌口”，而且还有“发奶”，现代医学中统统没有。</p>

<p>　　除了吃、住之外，还有一个“行”。我们那地方有月子之中不能串门之说，
否则会很不吉利。产妇不仅要坐，而且必须“坐”在床上，否则会伤了元气。其
实，孕产妇体内的血液处于高凝状态，长时间坐着、躺着不动，很容易发生下肢
静脉血栓。血栓一旦在血管内流动，栓塞肺动脉，是很危险的，会导致产妇猝死。
现在几乎每年都会听到这类的悲剧。以我的观点看，不仅不能坐，而且要早下床
活动。当然，活动的量得适当，不建议产妇产后去跑步。适当地在室内走走，在
院子内走走就行了。没有必要很大量地运动。所以，我们鼓励患者及早下床活动。
我常规指导下级医生术后24小时内拔导尿管，患者不起来也得起来。有些医生不
知道这个道理，一个劲地打点滴，甚至打到出院时为止，打完点滴才给拔导尿管。
其实，导尿管保留3天以上时，90%以上会发生泌尿道感染，应该尽早拔掉。这类
“中西医结合”，不仅无效，反而有害。</p>

<p>　　就这么一个“坐月子”，拉拉杂杂写了这么多。如果现在要我翻译这三个字，
感到还是很为难，这与科学不科学无关，而是我的外语表达能力不好。三个字要
用三千个字来表达，说明我们的传统文化真的是博大精深。我也没有受过正规的
中医教育，这些东西全部是病人咨询时，一点一点从患者那里得来的，很不全面。
中国各地的饮食习惯差异很大，忌口的习惯也差异很大。希望各地的网友在此跟
帖，看看全国各地还有一些什么样的与产妇坐月子有关的习惯？</p>

<p>　　文章贴出来后，有不少读者发表了看法，跟了不少帖。感谢这些读者的同时，
这次在发给新语丝时，就再多说几句：那就是产后有没有必要吃药？我的观点是
不吃。但是，现在有很多医生给患者开中成药“益母草冲剂”或“益母草胶囊”。
冲剂也好，胶囊也罢，都是穿在这个中成药身上的外衣，实质还是中药。既无发
奶的作用，又无减少出血的作用。恰恰相反，这个益母草服下之后，会使患者的
出血增加。有人在对另外一种药物做对照研究时，就把益母草拿来做对照组，可
见大家的“先入之见”有多深。可惜，观察的结果是，益母草冲剂组的患者，产
后的出血量最多，多于空白对照。我把这篇文章杀了，斑竹在驳斥我的中医观时，
对此好像还批评过。我当时也没有对此进行辩解。有兴趣的读者，可以翻翻关于
与斑竹争论时的帖子。</p>

<p>　　此外，一个很正常的产妇，要不要吃其它的药，要不要使用预防性抗生素？
我知道，现在在中国不使用预防性抗生素的医疗机构没有几家，但并不能说这种
做法就是对的。至少我这里的平产产妇没有使用任何抗生素，也没有一例发生过
感染，这点我坚持的还是对的。有一次与斯坦福大学的一位教授讨论产后抗生素
的使用问题，得知美国的择期剖宫产也不使用预防性抗生素，但我们还做不到。
不是怕病人感染，而是怕病人感染了输不起官司。曾经有几次想把对择期剖宫产
患者的抗生素停掉，但大家一致反对，连卫生局也模棱两可，我就没有办法了。
只有一次，有个过敏体质的患者对几乎所有的药都过敏，但又有医学原因需要做
剖宫产，那次我建议不使用任何抗生素，患者术后没有发生感染。其实，当时除
了我，其他人都提心吊胆，生怕患者感染。后来患者出院时，我提议不再给择期
剖宫产患者预防性的抗生素，但大家还是不同意，都说提心吊胆地过日子很可怕。
在这里，真心希望看了本文的读者，如果你的太太或友人生孩子，建议他们尽量
不要使用抗生素。因为没有这个必要。万一有发热，在常人我们多考虑感冒，但
在产妇，我们更多地考虑是不是有产后急性子宫内膜炎，这时候再使用抗生素，
其实并不会耽误患者的病情。</p>

<p>(XYS20080701)</p>

<p>◇◇新语丝(www.xys.org)(xys2.dxiong.com)(www.xysforum.org)(xys-reader.org)◇◇</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[程序员的洁癖]]></title>
    <link href="http://fsword.github.com/blog/2014/04/29/cheng-xu-yuan-de-ji-pi/"/>
    <updated>2014-04-29T12:47:00+08:00</updated>
    <id>http://fsword.github.com/blog/2014/04/29/cheng-xu-yuan-de-ji-pi</id>
    <content type="html"><![CDATA[<p>程序员这个群体里有一些人有代码洁癖，他们遇到一个烂东西往往不能忍受，一般认为，这对工作的推进是很不利的，因为有时候过于追求 do things right 会导致不能及时的 do right things 。</p>

<p>但是我却有些不同的想法，我们常常看到的情形其实不是洁癖太多而是太少，甚至对代码没有什么责任感，一些“很有执行力”的同事，其实是“大干快上”的路子，这样会让工作变成历史包袱。</p>

<p>当然，有洁癖的人确实会显得“执行力”不够，但是问题可能并不出在“因为洁癖要追求完美”，而是——能力确实就不够。</p>

<p>这么说有些残忍，不过以我自己的经历看，可能这才是真实情况。</p>

<p>我也是个有洁癖的人，干活一直不是很快。刚工作的时候别人往往建议”别想太完美，做了再说“。现在工作很多年了，有些方面我开始熟悉甚至精通，由于经验积累，我在这些方面做事会比较快，这时遇到之前的朋友，他们会觉得我开始务实，不那么有洁癖了。</p>

<p>然而我的洁癖其实一直没变，变化的是工作能力。即使现在，如果遇到我不熟悉的领域，工作还是不够快。当然，这时其他人会觉得“你又太注意完美了”。</p>

<p>追求完美当然很好，这些人只是觉得过于注意完美会影响效率。逻辑确实没错，不过我们怎么判断这个度呢？有些我们一开始没有想好的东西会影响后续的很多工作，而有些东西计较太多却并没什么区别。是“吹毛求疵”还是“远见卓识”？如何判断？</p>

<p>说实话，我也没什么好办法，可能有点帮助的就是过往的经验了。编程是一个创造性的工作（如果只是重复劳动，那么复制即可，也就不需要coding了），不过通过抽象、类比这样的思维活动，我们能找到一些和过去的经验类似的模式，回想过去的经历，我们会认识到某些事情看来不重要，而某些则对后续工作影响深远，在这些经验的支持下，我们会选择把力气用在什么地方。</p>

<p>从这个角度看，你会发现一个现象，其实没有真正意义上“求全责备”的人，即使那些公认有洁癖的人，也不会在所有地方都吹毛求疵，他们只是在“什么东西更重要”这个问题上作出了与你不同的回答而已。</p>

<p>每个人的经历都不尽相同，因此基于经验产生的判断也不会完全一样，而团队需要交流的，正是这种不同的经验。由于每个人的思维都可能存在盲点和误区，大家沟通各自的旧有经验，发现值得重视的地方，就可以不断改进工作；另一方面，由于每个人都会有一些思维定势，因此交流和沟通都会带来冲突，解决冲突需要冷静细致的工作，甚至还要搭上时间成本。因此，民主的氛围有时会比较有助于团队成功，但有时又会带来很多的代价。在这方面没有标准答案，只能尽量的寻求平衡。</p>

<p>甚至经历也不是万能的，有过几年工作经历以后，很多人都会遇到被自己的旧知识“坑一下”的情况，似乎以前的教训现在也可以忽视，而以前的成功方法放到现在反倒是一剂毒药。这是“创造性”工作的本质决定的，抽象也好类比也罢，它一定需要丢弃一些不同，我们常说“旧观念需要更新，情况变了”，这里的情况就是那些被抛弃掉的、本以为不重要的东西。</p>

<p>上述话题要说完整可能需要很多篇幅，这里只想说明的软件开发是一件很难的事情。而正是因为软件开发如此之难，因此需要每个人都有一些“洁癖”，工作时需要更多的思考，而不只是完成任务。如果你因此而进展缓慢，无论是不是因为“洁癖”太多，努力提高能力和经验都是解决之道，慢慢的，你的工作会更熟练，效率得以提升，同时也更有经验去判断什么才是真正重要的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[比特币值多少钱？]]></title>
    <link href="http://fsword.github.com/blog/2014/04/06/how-much-about-btc/"/>
    <updated>2014-04-06T12:06:00+08:00</updated>
    <id>http://fsword.github.com/blog/2014/04/06/how-much-about-btc</id>
    <content type="html"><![CDATA[<p>「摘要：货币作为通用凭证，其价值是背后所背书的商品和服务，比特币的价值就由此决定。」</p>

<p>前段时间写了一篇文章讨论比特币，有同事提了一个问题：“比特币到底值多少钱？”，最近一个月，比特币的交易价从4260到2420（根据okcoin交易所价格）出现大幅度波动，让这个问题显得更现实了。</p>

<p>比特币值多少钱？讨论这个问题，其实还是要回归到货币的本身作用上去，我们先复习一下基本常识。</p>

<p>作为媒介，货币把以物易物的一次交易分割为两笔交易：第一次是用自己生产的商品或者服务交换得到货币，第二次是用货币交换自己需要的其它产品或者服务。因此，这两次交易可以在不同的时间和地点，为供需双方提供了方便。考察这个过程，可以看出，货币本质上是信用凭证——人们可以用它证明自己曾经对外提供过某种价值，并以此要求获取同等价值的其它商品或者服务。</p>

<pre><code>为了方便讨论，我们把商品和服务统称为商品，后文中提到的商品，如无特殊说明，指的既包括狭义的商品，也包括服务。
</code></pre>

<p>既然是基于价值的信用凭证，那么凭证的“价值”其实就是它背后所“代理”的商品的价值。简单来说，一枚比特币的价值仅取决于进行交换的两个人，以买一块匹萨为例，如果你愿意用一块匹萨换得一枚比特币，那么这枚比特币的价值就是一块匹萨的价值。</p>

<p>这看起来是废话，但很多有价值的结论往往会基于这种废话，正因为前提正确到了接近废话的地步，我们后面的结论才会可靠。</p>

<p>进一步考察上面买匹萨这个现象，我们考虑到每一枚比特币都是实质等同的，换句话说，每一次交易都是在为所有的比特币确定了一个价格，随着各种交易的不断进行，这个价格也在随时变化。这些看起来似乎没有什么规律，然而如果我们把视角切换到整个比特币市场，你会发现，基于上面的前提，我们可以为整个比特币市场建立一个对应关系：</p>

<blockquote><p>所有流通的比特币总价值 = 所有用比特币进行交易的商品总价值</p></blockquote>

<p>从某种角度看，上面这句话实际上是从宏观角度重复了刚才说的前提。在比特币交易市场上，无数的消费者用脚投票，在不断的界定比特币的价值。在这里，比特币的价值，就是比特币交易所的成交价。</p>

<p>“交易所的交易价就是比特币的价值”，肯定会有人感觉很荒谬，按照这种分析，岂不是可以假设任何一个商品可以具备任意高的价值了吗？</p>

<p>这话也对也不对。现代经济学（不是马克思那一套）认为交易就是双方界定价值的过程，只要有人愿意出价，那就是对这个商品进行了一次标价，而考虑到各类人想法不同，这个价值的确是”一切皆有可能“。但是，当无数的交易构成了市场时，情况又会从混乱趋向稳定，即使一两个人出于恶作剧的目的进行捣乱，众多的交易一旦展开，商品的价格还是会稳定下来，这就是所谓的市场价。</p>

<p>不过问题并没有结束，现在我们的理解是：比特币的价值等于现在的市场交易价，但这只是<code>现在</code>。而当人们在问“比特币值多少钱”的时候，他们真正想问的其实是<code>未来</code>——比特币<code>将</code>会值多少？</p>

<p>答案很简单，由于比特币作为货币是一种信用凭证，所以比特币市场中”输入”了多少商品，现有的比特币就“背书”了多少商品，相应的，未来有多少财富进入这个市场，那么比特币就会在将来值多少商品的价值。</p>

<p>需要说明的是，这个规律对进入比特币市场的其它货币也适用，因为虽然货币不等于商品本身，但是它们也是信用凭证，其它货币的进入实际上等价于它们“背书”的商品进入了比特币市场。</p>

<p>那么，这个价值会有多大呢？其实在2013年比特币暴涨的时候已经有人算过了，在一篇名为《<a href="http://zhiqiang.org/blog/finance/intrinsic-value-of-bitcoin.html">比特币的内在价值</a>》的博客中，作者写道——</p>

<ul>
<li>如果你认为比特币和黄金差不多，全球央行的黄金储备总价值大约12万亿美元，换算下来一枚比特币大约价值57万多美元。</li>
<li>如果你认为比特币能完全替代美元钞票，美元的M0大约9000亿美元，如果用2100万比特币代替的话，一枚比特币大约价值4.5万美元。</li>
<li>如果你认为比特币能够替代全球隐藏的「黑钱」，由于「黑钱」不好定义，我们用「消失不见」的美元钞票来代替。全球的黑钱大约有1万亿美元。假设都用比特币来持有，一枚比特币的价值大约为4.8万美元。</li>
</ul>


<p>事实上，这种计算方法就是基于比特币将会覆盖的商品市场规模来进行估计的，根据我们之前的逻辑，其实这个估计方法原则上是合理的，当然细节上需要修正。</p>

<hr />

<p>注： 这里的“细节”主要是需要考虑流通速度，考虑到费雪公式：</p>

<pre><code>P × Q = M × V （商品加权平均价 x 商品数量 = 货币数量 x 货币流通速度）
</code></pre>

<p>对于比特币来说，假定商品数量和价格不变，流通越快，需求量会越低。</p>

<blockquote><p>通俗来说，如果一张美元每天经过1次交换，而比特币会经过3次交换，那么需要的比特币仅有美元的三分之一。</p></blockquote>

<hr />

<p>这结果也许令人吃惊，甚至有人认为这些都是天方夜谭，是郁金香泡沫，他们说法币才是有价值的货币。其实不然，认为法币天然有价值，有可能会陷入一个循环论证的陷阱：首先再重复一遍我们之前的结论了——一种货币值多少钱，取决于通过这种货币作为信用凭证表示的商品价值总量和货币总量的除法商；然后考虑一下那些人的逻辑：因为法币有价值，所以应该会有很多人使用，而法币值多少钱，又归因于众人的使用——这不正是自我循环么？</p>

<p>这个循环论证的错误如此简单，所以有些人也知道没有说服力，所以他们找到了一种补救性解释——法币不只是普通货币，它背后有国家信用背书，因此它会更有价值。</p>

<p>这个打补丁的解释也有问题，因为国家信用并不是什么神秘力量，它只是信用相对更好，并不是无限责任，在一个较长期的时间范围上看，国家的货币信用其实是很不靠谱的，如果法币的价值在于国家信用，那么其优越性也不会比某个大公司发行一种货币更好，这也是《货币的非国家化》作者的思考基础——国家在本质上也是一个市场主体而已，因此法币没有特殊性（货币的信用到底是什么？这个问题深究一下也很有意思，后面有机会再说吧）。</p>

<p>既然我们不能用自我循环来证明什么，那么就回归到货币的价值上去，看看货币究竟是解决了什么问题。前面说过，货币是基于价值的信用凭证，那不妨讨论一下为什么需要这个凭证，我们也许就能明白货币这个凭证的价值。</p>

<p>不用过多解释就能想明白，货币这个凭证是为了让以物易物的交易分离出交换双方，使得双方可以独立进行，换句话说，货币是用来降低交易费用的。优币还是劣币？至少在流通能力上应该可以体现：</p>

<pre><code>法币的交易需要银行介入，转账及其复杂，成本高傲，费用也不低
比特币的交易可以独立完成，成本很低
</code></pre>

<p>不能随意制造导致贬值，这只是一个好货币的基本要求（当然，现存的各种货币连这个都很难达到），比特币在这点上只不过和黄金相同而已；而低成本、稳定可靠的交易费用，这才是比特币超越黄金（也包括纸黄金）的魅力所在，基于这个前提，比特币能够广泛用于一切电子交易，同时能降低跨国交易成本，这个市场如此之大，足以支撑比特币的价值走上更高的台阶。</p>

<p>[注：本文最近一次修改时，比特币按照 okcoin 的成交价已经跌到了 2700 RMB 以下，所以你可以把我这篇文章看作一个预言，一到两年后我们再回来看这篇文章吧]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么说比特币是货币？]]></title>
    <link href="http://fsword.github.com/blog/2014/03/16/btc-is-money/"/>
    <updated>2014-03-16T22:53:00+08:00</updated>
    <id>http://fsword.github.com/blog/2014/03/16/btc-is-money</id>
    <content type="html"><![CDATA[<p>「摘要：货币本质上是一种通用凭证，证明拥有某种用于交换的资源和服务。劣币还是良币就看是否很容易对这个凭证起到“替代”作用，比特币在这一点上可以完美的抵御“注水”行为，因此可以很好的充当交易凭证，成为实际上的货币」</p>

<p>和朋友聊比特币，常常会有人问：“中国政府、日本政府都宣称比特币不是货币，你凭什么说它是货币”，这个问题很有代表性，我们就来专门谈谈这个问题。</p>

<p>首先要问，政府是否能决定一个东西是货币呢？</p>

<p>很多人都知道，1948年下半年国民党政府所发行的金元券，这是政府公开要求的货币，然而结果如何？金元券很快变成废纸，反倒是当时并非代表官方的共产党政权发行的货币逐渐成为主流。可能有人认为这个和政权更迭有关，因为看起来也可以理解为是国民党政府的政治和军事失败导致了金元券的失败，但是这个理由不是很有力，因为国统区金元券被逐步抛弃的时候，上海这样的大城市还没有易手，民众也没有换用解放区政府发行的货币，而是采用了以物易物和黄金作为代替。</p>

<p>更典型的例子是西汉末年的王莽币，那是具有政府信用的货币，而且在“王莽谦恭下士”的一开始，并没有政权被推翻的担忧，然而政府的货币政策反而加速了经济的崩溃，也导致了货币和王莽政权自身的灭亡。</p>

<p>上述的例子其实是说明了一个一般性的观点——货币现象终究还是经济现象，它必然要经过市场的考验，而政府虽然可以规定什么是法币，但是其实不能决定什么是老百姓赖以生活的通用货币。</p>

<p>随心所欲的发行一个货币，政府做不到，那么，能不能随心所欲的打压一种货币呢？</p>

<p>这要分开看——如果你去纳税，肯定要用政府指定的法定货币，比如我，纳税当然是人民币，不过，我也有一些同事，手头的美金比较方便，他纳税还可以拿出美金来，临时兑换成人民币缴税，这些并不矛盾。所以，从纳税这个功能看，政府指定一种货币不等于排斥另一种货币。</p>

<p>从另一方面看，政府可以下禁令禁止持有或者交易某种物品的，比如，在1947年的上海，你拿着解放区政府的货币是不太安全的。在这个意义上，政府确实能够打压一种货币——但是，这种打压依然是有限的，想想黑市吧，这个隐藏的市场虽然无时无刻不受到各国政府的联合打压，然而依然在持续的运行。无论我们喜欢不喜欢，可以预想的将来它都不会消亡。</p>

<p>小结一下上面所说的内容吧，其实归根到底一句话，这是——“市场的力量”，经历过改革开放的人们，对这个概念应该是再熟悉不过了。好的货币被保留，不是因为政府支持，而是因为市场认可，坏的货币被淘汰，不是因为政府反对，关键还是市场的否定。</p>

<p>既然市场是关键，那么让我们回到货币本身，思考一下什么才是货币。</p>

<p>众所周知，人类使用的货币的过程是从贝壳到金属币（例如铜钱、银子和金条），再到纸币的。那么问题就来了，贝壳为什么会被淘汰？其它金属为什么没能成为通用货币？后来又怎么被一张小纸片所代替？</p>

<p>有人解释说：金属是有用的，而贝壳是无用的。这个解释很牵强，因为我们知道秦半两和汉代五铢钱都是铜币，而在那个年代，铁器正在以更坚牢锐利的特点慢慢走向生产生活的舞台中央，那么，更有用的铁为什么没有成为主要货币呢？</p>

<p>我们熟悉的黄金也是一个很好的例子，很多人认为黄金背后的价值来源于它“有用”，这其实是一个误解。黄金不像钻石那样有很好的工业用途，那灿烂的颜色在现代新材料面前也没有什么不可替代的优势，对现代人来说，黄金除了加工为艺术品，已经基本没有什么拿得出手的使用价值，而成为工艺品，其中一个很大原因还是因为它本身很贵，所以，甚至艺术品制造也不能成为黄金有用的理由。</p>

<p>有用并不是货币的关键属性，那么它的关键属性是什么呢？我想，至少应该有这么几条——易于切分、便于携带、不易被替代。</p>

<p>我们先说最简单的前两条：</p>

<p>一、易于切分：这个很容易理解，金属币正是在这一点上领先于贝壳等早期货币，现代纸币通过不同面值的组合，大致上也能达到这个要求。</p>

<p>二、便于携带：货币是用来交易的，因此是否便于携带就很重要了，金属币在这方面是劣于纸币的，所以现代社会的黄金大部分都在国家的央行金库中，而与纸币相比，电子货币是更为方便和易于携带的货币形态。</p>

<p>作为电子系统，比特币天然便于携带，同时它在设计上支持无限切分，所以在前两条上，它相比任何货币形态都不落下风，但是更大的关键在第三条，而第三条不但不易理解，甚至也不好描述——其实“替代”这个用词并不太准确，只是考虑了很久我也找不到更好的说法。不过我还可以举例来说明我的意思，一般来说，我所说的的“替代”有这么几种常见方式——</p>

<ul>
<li><p>伪钞：这是最容易理解的一种“替代”，由于大多数人不能分辨钞票的真伪，拿着一张制作精美的伪钞会和真钞票具有同样的购买效果，如果打击伪钞不力，那么伪钞就可以“替代”真钞</p></li>
<li><p>（政府）货币增发：根据法律，新印出来的货币和原来市场上的货币具有同样的法律效力，也就是说，新钱可以“替代”旧钱</p></li>
<li><p>（贵金属）发现新矿：例如地理大发现改变了黄金和白银在欧洲的总拥有量，大家都是金块，从美洲运回的和旧的是一样的，新黄金可以“替代”旧黄金</p></li>
</ul>


<p>上述情况虽然看似不同，但是对货币而言其效果却是相同的——钱不值钱了。</p>

<p>为什么要讨论“替代”，我们先来看看货币的价值。用户持有货币，目的是期望这玩意能够被换成自己需要的东西（也许是马上，也许是未来）。而对普通人来说，获取货币的方式是交换——俗称挣钱——纸币也好，黄金也罢，我们得到它依靠的是付出某种商品或者服务，比如我卖一个苹果能获得两块钱，这个行为背后是我的一次价值判断——一个苹果价值为一块钱。</p>

<p>货币其实是某种凭证，我们以此证明自己曾经付出过劳动，出让过货物，提供过帮助，接受这个货币实际上是在与这些劳动、货物、帮助背后蕴含的价值进行交换。而一个凭证，其本身最重要的特性是什么呢？那就是不可替代！</p>

<p>举个例子，我向别人借本书，同时写了个借条给对方，对我来说，这个借条是用纸做的（纸币）还是用铜做的（铜币）并不重要，重要的是我要根据这个借条还书，所以这个借条一定是“独一份”，如果谁都能自己写个纸条，然后让我把书交还给他，那可就糟糕了。</p>

<p>现在回到“替代”这个概念，无论是上面举的哪个例子，货币的总量都变多了——当初我借给你的书得到一张两块钱的借条，而现在有人直接开一下印钞机就打印出了我们无法分辨的借条，那谁还愿意把书借给你？</p>

<p>“替代”这个概念很重要，因为它是我们理解通胀现象的基础，简言之，如果我们能区别两个货币，那么它们不存在“替代”的可能，而是会形成汇率，除非我们规定一个不变的汇率，否则一种货币的通胀不会传递到另外一种货币。</p>

<p>很多名气很大（我不知道实际水平如何）的人也犯过这个错误，比如一些人喜欢的郎咸平先生，他曾在节目中提出过一个观点：“比特币总量虽然不变，但是我们可以创造出各种山寨币，种类的增加还是会通货膨胀”，这话说的简直就像个外行，因为山寨币并不能和比特币互相替代，欧盟统一了货币，也没见因此而通缩。</p>

<p>有人会有疑问，现实生活中，也有利用外国货币冲击一国经济的情况，如果不能“替代”就不会引入通胀，那么这种现象又是怎么回事呢？</p>

<p>很简单，增加货币种类不会直接导致通胀，但是外国货币可能会对应到一些资源，由于本来由本国法币对应的资源被改用外国货币对应，本国的货币就显得多余了，钱多货少，于是价格就下跌了。那么郎咸平说的对吗？还是不对，因为这种“货币竞争”是要看货币的强弱的，如果中国放开货币限制，允许美元长驱直入，可能会有一些资源改为由美元对应，但是如果是是越南盾进来，则不会有这样的现象，因为人们相信美元，不相信越南盾，所以根本就不会有什么资产使用越南盾对应。</p>

<p>无论这个货币使用什么方式衡量多寡（比如黄金按成色和重量，纸币按照面值等等），他被伪造就是一种被替代——因为在一定场合下，假钞是可以代替真钞票进行交易的，此时，真钞票就被“替代”了。</p>

<p>通货膨胀也是一种替代，所谓钞票，每一张之间应当是含义相同的，除了特别设计的不同面值，使用中应该是一样的，而如果增加钞票的发行量，虽然发行的是真钞票，但是对经济的危害和伪钞是一样的——都会使得原来付出代价获得的钞票变得不那么稀罕。</p>

<p>理解了替代的概念，我们再来看看现有的几种被当作货币的事物，拿它们来与比特币做一个对比吧。</p>

<ul>
<li><p>黄金：出现新的资源几乎不太可能，所以没有“替代”。但是另一方面，黄金可以“以次充好”，如果要避免被“替代”，我们还需要能够鉴定成色，这是使用它的一大麻烦。</p></li>
<li><p>各国法币：是否存在新的替代，完全由央行决定，因此是否存在“替代”，要看政府的财政政策。另外，根据纸币的制作工艺，不同的法币还有不同比例的伪钞在市面上流通，它们也是“替代”。</p></li>
<li><p>比特币：由算法决定没有人能增加真的货币数量，无可替代。同时，由于它本质上是向全世界公开整个帐簿，因此也无法伪造。</p></li>
</ul>


<p>本身就易于切分和携带，再加上没有发生替代的可能，比特币无疑是更有资格成为货币的。即使各国央行联合抵制，也只是延缓这一进程，因为它其实是适应市场的需要而生，而最终的选择是市场作出的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个bug的修改]]></title>
    <link href="http://fsword.github.com/blog/2013/08/27/yi-ge-bugde-xiu-gai/"/>
    <updated>2013-08-27T16:28:00+08:00</updated>
    <id>http://fsword.github.com/blog/2013/08/27/yi-ge-bugde-xiu-gai</id>
    <content type="html"><![CDATA[<p>下面是一段工作中编写的代码，为便于理解修改如下——</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Order</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:type</span><span class="p">,</span> <span class="ss">:sub_orders</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 统计订单及其包含子订单的数量，按照订单类型归类</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">count_items</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">sub_orders</span><span class="o">.</span><span class="n">reduce</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="n">order</span><span class="o">|</span>
</span><span class='line'>      <span class="n">order</span><span class="o">.</span><span class="n">count_items</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="n">result</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span><span class="o">[</span><span class="n">key</span><span class="o">]||</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">value</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">result</span><span class="o">[</span><span class="n">type</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span><span class="o">[</span><span class="n">type</span><span class="o">]||</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>乍一看没问题，但是计算出来的数字始终不对，细看才发现问题，修改一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">count_items</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">sub_orders</span><span class="o">.</span><span class="n">reduce</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="n">order</span><span class="o">|</span>
</span><span class='line'>      <span class="n">order</span><span class="o">.</span><span class="n">count_items</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>        <span class="n">result</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span><span class="o">[</span><span class="n">key</span><span class="o">]||</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">value</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">result</span> <span class="c1">#添加这一行</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">result</span><span class="o">[</span><span class="n">type</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">result</span><span class="o">[</span><span class="n">type</span><span class="o">]||</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">result</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>分析原因，是对reduce的使用不够细致：each和map容易和以前写java代码时的思维方式一致，所以不容易犯错；而reduce的返回值用于进一步迭代，这种做法以前用的较少，潜意识里还是将result和s看作是一个服务于循环的变量。</p>

<p>想明白以后再带着新的角度看这个代码，于是发现还可以简化，reduce操作的最大特点就是将初始值和结果纳入到计算框架中，这样可以减少很多重复劳动，最后改成这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">count_items</span>
</span><span class='line'>    <span class="n">sub_orders</span><span class="o">.</span><span class="n">reduce</span><span class="p">({</span> <span class="n">type</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">})</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="n">order</span><span class="o">|</span>
</span><span class='line'>      <span class="n">order</span><span class="o">.</span><span class="n">count_items</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="p">,</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span><span class="o">|</span>
</span><span class='line'>        <span class="n">s</span><span class="o">.</span><span class="n">update</span> <span class="n">key</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="n">s</span><span class="o">[</span><span class="n">key</span><span class="o">]||</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">value</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实就两点：1. block参数的模式匹配；2. update的返回值就是当前对象</p>

<p>试验代码在 <a href="https://gist.github.com/fsword/6353526">这里</a> ，Be fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分享笔记-服务设计]]></title>
    <link href="http://fsword.github.com/blog/2013/08/02/fen-xiang-bi-ji-fu-wu-she-ji/"/>
    <updated>2013-08-02T15:49:00+08:00</updated>
    <id>http://fsword.github.com/blog/2013/08/02/fen-xiang-bi-ji-fu-wu-she-ji</id>
    <content type="html"><![CDATA[<p>这是公司UI团队的分享，做一个简单的摘要</p>

<h3>服务体验的相关要素</h3>

<ul>
<li>空间</li>
<li>人</li>
<li>(周边)物体</li>
<li>界面（包括交互方式）</li>
<li>传播</li>
<li>衡量</li>
</ul>


<h3>服务体验分析</h3>

<ul>
<li>分解服务环节</li>
<li>对每一个服务环节进行分析，分析思路可以是——</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> -&gt; 参与体验者
</span><span class='line'>   -&gt; 提供的服务
</span><span class='line'>     -&gt; 体验感走势 
</span><span class='line'>       -&gt; 用户的担忧 
</span><span class='line'>         -&gt; 增加的服务</span></code></pre></td></tr></table></div></figure>


<h3>举例</h3>

<ul>
<li>拔牙的手势: 提供给用户明确的感情交流机会</li>
<li>51job -> linkedin：产品定位的变化</li>
</ul>


<h3>其它</h3>

<p>和客户沟通的时候需要有一定的方法，避免开放式的讨论</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单测与持续集成3-erlang例子]]></title>
    <link href="http://fsword.github.com/blog/2013/07/22/dan-ce-yu-chi-xu-ji-cheng-3-erlangli-zi/"/>
    <updated>2013-07-22T10:22:00+08:00</updated>
    <id>http://fsword.github.com/blog/2013/07/22/dan-ce-yu-chi-xu-ji-cheng-3-erlangli-zi</id>
    <content type="html"><![CDATA[<p>本篇是<a href="http://fsword.github.io/blog/2013/06/07/dan-yuan-ce-shi-bu-shi-chi-xu-ji-cheng-de-ji-chu-2-xiang-mu-zhong-de-li-zi/">这篇</a>的后续，很早就放进了草稿箱，但是我一直懒得修改好，真是典型的拖延症患者。</p>

<p>我自己在项目中使用erlang时间并不长，而且断断续续，充其量是个初学者。之所以用erlang举例子，是因为它比较有代表性。</p>

<p>学习erlang，OTP是个转折点，接触了gen_server等一系列模式以后，很自然就会感觉到其实一个erlang进程更像是一个对象——有标识符，内部保存状态、对外提供服务接口、可用的交互通过消息传递进行等等。</p>

<p>相应的，进行测试时的问题也很类似。人们在宣传erlang时常常说它由于状态不可变，所以可测性很好，然而如果以一个进程为测试对象来看，我们会遇到进程间协作的问题——这相当于java程序里面的对象间协作。</p>

<p>在apposs_agent项目中我就遇到了这类问题，例如，有三个模块之间的依赖关系如下：</p>

<pre><code>client -&gt; responder
       -&gt; ssh_executor
</code></pre>

<p>那么，这时模块client中怎么使用其它模块呢？下意识的，我们让这种依赖变得“可插入”，于是就有了类似这样的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% client.erl</span>
</span><span class='line'><span class="c">%% .....</span>
</span><span class='line'><span class="nf">init</span><span class="p">([</span><span class="nv">Responder_mod</span><span class="p">,</span> <span class="nv">Host</span><span class="p">,</span> <span class="nv">GetHostInfoFun</span><span class="p">])</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="c">%% ...</span>
</span><span class='line'>  <span class="nv">State</span> <span class="o">=</span> <span class="nl">#state</span><span class="p">{</span><span class="n">host</span> <span class="o">=</span> <span class="nv">Host</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">get_host_info_fun</span><span class="o">=</span><span class="nv">GetHostInfoFun</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">responder_mod</span> <span class="o">=</span> <span class="nv">Responder_mod</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">cmds</span> <span class="o">=</span> <span class="nv">Cmds</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>  <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">send_all_state_event</span><span class="p">(</span><span class="o">?</span><span class="nv">SERVER</span><span class="p">(</span><span class="nv">Host</span><span class="p">),</span> <span class="n">reconnect</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">disconnected</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% ......</span>
</span><span class='line'><span class="nf">normal</span><span class="p">(</span><span class="n">do_cmd</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{</span><span class="n">host</span><span class="o">=</span><span class="nv">Host</span><span class="p">,</span> <span class="n">cm</span><span class="o">=</span><span class="nv">Cm</span><span class="p">,</span> <span class="n">cmds</span><span class="o">=</span><span class="p">[</span><span class="nv">Cmd</span><span class="p">|</span><span class="nv">T_cmds</span><span class="p">],</span> <span class="n">exec_mod</span><span class="o">=</span><span class="nv">ExecMod</span><span class="p">,</span> <span class="n">responder_mod</span><span class="o">=</span><span class="nv">RespMod</span><span class="p">}</span><span class="o">=</span><span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">RespMod</span><span class="p">:</span><span class="nf">run_caller</span><span class="p">(</span><span class="n">client</span><span class="p">))(</span><span class="nv">Host</span><span class="p">,</span> <span class="nv">Cmd</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Handler</span> <span class="o">=</span> <span class="nv">ExecMod</span><span class="p">:</span><span class="nf">exec</span><span class="p">(</span><span class="nv">Cm</span><span class="p">,</span> <span class="nv">Cmd</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">run</span><span class="p">,</span> <span class="nv">State</span><span class="nl">#state</span><span class="p">{</span><span class="n">current_cmd</span><span class="o">=</span><span class="nv">Cmd</span><span class="p">,</span> <span class="n">cmds</span><span class="o">=</span><span class="nv">T_cmds</span><span class="p">,</span> <span class="n">handler</span><span class="o">=</span><span class="nv">Handler</span><span class="p">}};</span>
</span><span class='line'><span class="c">%% ......</span>
</span></code></pre></td></tr></table></div></figure>


<p>在state中放入复杂的数据结构，其实就是为了让ExecMod和RespMod变得可以“配置”，还单独测试client而不用依赖其它模块。</p>

<p>然而这种设计的成本实在太高了，实际中，exec_mod和responder_mod并不会改变，这个目标属于over design。</p>

<p>那么为了可测性是否有必要这么做呢？有一段时间我也不是很确定。</p>

<p>从结构上来看，ssh_executor和responder属于下层模块，client是它们的用户，隔离下层模块运行上层模块意义不大。从某种角度看，软件开发很像搭积木，我们做好下层模块以后就不用“隔离”它们了，要测试，带上大家一起跑是很方便的做法。</p>

<p>想通了这一点，上述的代码就很简单了——</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">init</span><span class="p">([</span><span class="nv">Host</span><span class="p">])</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="c">%% ...</span>
</span><span class='line'>  <span class="nv">State</span> <span class="o">=</span> <span class="nl">#state</span><span class="p">{</span><span class="n">host</span> <span class="o">=</span> <span class="nv">Host</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">cmds</span> <span class="o">=</span> <span class="nv">Cmds</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>  <span class="nn">gen_fsm</span><span class="p">:</span><span class="nf">send_all_state_event</span><span class="p">(</span><span class="o">?</span><span class="nv">SERVER</span><span class="p">(</span><span class="nv">Host</span><span class="p">),</span> <span class="n">reconnect</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">disconnected</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% ......</span>
</span><span class='line'><span class="nf">normal</span><span class="p">(</span><span class="n">do_cmd</span><span class="p">,</span> <span class="nl">#state</span><span class="p">{</span><span class="n">host</span><span class="o">=</span><span class="nv">Host</span><span class="p">,</span> <span class="n">cm</span><span class="o">=</span><span class="nv">Cm</span><span class="p">,</span> <span class="n">cmds</span><span class="o">=</span><span class="p">[</span><span class="nv">Cmd</span><span class="p">|</span><span class="nv">T_cmds</span><span class="p">]}</span><span class="o">=</span><span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nn">responder</span><span class="p">:</span><span class="nf">run_caller</span><span class="p">(</span><span class="n">client</span><span class="p">))(</span><span class="nv">Host</span><span class="p">,</span> <span class="nv">Cmd</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">Handler</span> <span class="o">=</span> <span class="nn">ssh_executor</span><span class="p">:</span><span class="nf">exec</span><span class="p">(</span><span class="nv">Cm</span><span class="p">,</span> <span class="nv">Cmd</span><span class="p">),</span>
</span><span class='line'>  <span class="p">{</span><span class="n">next_state</span><span class="p">,</span> <span class="n">run</span><span class="p">,</span> <span class="nv">State</span><span class="nl">#state</span><span class="p">{</span><span class="n">current_cmd</span><span class="o">=</span><span class="nv">Cmd</span><span class="p">,</span> <span class="n">cmds</span><span class="o">=</span><span class="nv">T_cmds</span><span class="p">,</span> <span class="n">handler</span><span class="o">=</span><span class="nv">Handler</span><span class="p">}};</span>
</span><span class='line'><span class="c">%% ......</span>
</span></code></pre></td></tr></table></div></figure>


<p>显然，这样修改以后，不但代码量减少了，而且代码专注于表达业务逻辑，因而也更容易理解了，好的代码应该专注，而不是眉毛胡子一把抓，您说是不是？</p>

<p>有人会说，那我们难道就不要单元测试了么？不错，这正是我想说的，<code>单元测试的关注点应该是具有很高算法复杂度的逻辑单元，而不是复杂性都委托出去的业务模块</code>，对于后者，不做单元测试并不是罪过。</p>

<p>上述的想法也只是逻辑推演，为了更加确认，我和淘宝内部的一个erlang项目的同事做了一些了解——</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="err">“</span><span class="n">hi</span><span class="err">，你们的代码写很多</span><span class="n">mock</span><span class="err">吗？“</span>
</span><span class='line'><span class="err">”写的不多“</span>
</span><span class='line'><span class="err">”那单元测试的时候怎么隔离呢？要在进程内部的状态里面保存关联模块么？”</span>
</span><span class='line'><span class="err">“不用，我们主要写集成测试”</span>
</span><span class='line'><span class="err">“集成测试会不会覆盖不到位？”</span>
</span><span class='line'><span class="err">“目前的功能以业务为主，逻辑不是很复杂，用集成测试就够了”</span>
</span></code></pre></td></tr></table></div></figure>


<p>同事的回答和我想的一样，不过这毕竟只是少数项目，我希望能有更多的案例，大家一起交流、讨论</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[require使用例子]]></title>
    <link href="http://fsword.github.com/blog/2013/06/18/requireshi-yong-li-zi/"/>
    <updated>2013-06-18T17:08:00+08:00</updated>
    <id>http://fsword.github.com/blog/2013/06/18/requireshi-yong-li-zi</id>
    <content type="html"><![CDATA[<p>常常有人搞不清楚ruby脚本怎么装载，其实ruby有一个$LOAD_PATH全局变量，相当于java的classpath，require就是从这里的目录中进行查找的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls
</span><span class='line'>boot.rb
</span><span class='line'>$ irb
</span><span class='line'>irb(main):001:0&gt; require 'boot'
</span><span class='line'>LoadError: cannot load such file -- boot
</span><span class='line'>    from /home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
</span><span class='line'>    from /home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
</span><span class='line'>    from (irb):1
</span><span class='line'>    from /home/john/.rvm/rubies/ruby-1.9.3-p392/bin/irb:13:in `&lt;main&gt;'
</span><span class='line'>irb(main):002:0&gt; puts $LOAD_PATH
</span><span class='line'>/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/site_ruby/1.9.1
</span><span class='line'>/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/site_ruby/1.9.1/x86_64-linux
</span><span class='line'>/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/site_ruby
</span><span class='line'>/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/vendor_ruby/1.9.1
</span><span class='line'>/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/vendor_ruby/1.9.1/x86_64-linux
</span><span class='line'>/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/vendor_ruby
</span><span class='line'>/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/1.9.1
</span><span class='line'>/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/1.9.1/x86_64-linux
</span><span class='line'>=&gt; nil
</span><span class='line'>irb(main):003:0&gt; $LOAD_PATH &lt;&lt; '.'
</span><span class='line'>=&gt; ["/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/site_ruby/1.9.1", "/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/site_ruby/1.9.1/x86_64-linux", "/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/site_ruby", "/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/vendor_ruby/1.9.1", "/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/vendor_ruby/1.9.1/x86_64-linux", "/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/vendor_ruby", "/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/1.9.1", "/home/john/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/1.9.1/x86_64-linux", "."]
</span><span class='line'>irb(main):004:0&gt; require 'boot'
</span><span class='line'>=&gt; true</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单测与持续集成2-项目中的例子]]></title>
    <link href="http://fsword.github.com/blog/2013/06/07/dan-yuan-ce-shi-bu-shi-chi-xu-ji-cheng-de-ji-chu-2-xiang-mu-zhong-de-li-zi/"/>
    <updated>2013-06-07T19:27:00+08:00</updated>
    <id>http://fsword.github.com/blog/2013/06/07/dan-yuan-ce-shi-bu-shi-chi-xu-ji-cheng-de-ji-chu-2-xiang-mu-zhong-de-li-zi</id>
    <content type="html"><![CDATA[<p>(原来的标题太长，改短一些 :-) )</p>

<p>前一篇博客写完以后觉得有些空，这篇说说现实中的例子。</p>

<p>淘宝是java集散地，我们以java项目为例，下面是一个项目中的测试代码——</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCreative</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">CreativeDO</span> <span class="n">creative</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CreativeDO</span><span class="o">();</span>
</span><span class='line'>    <span class="o">...</span><span class="err">此处省略</span><span class="mi">11</span><span class="err">行</span><span class="n">set</span><span class="err">语句</span><span class="o">...</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">creativeId</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">creativeDAO</span><span class="o">.</span><span class="na">addCreative</span><span class="o">(</span><span class="n">creative</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">creativeId</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个test方法只是用了最基本的验证方式，显然这是用于确保基本功能——能够正确的添加记录，充其量只是用来验证和数据库相关的配置文件是否正确</p>

<p>我们继续看上层代码——</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CreativeServiceImpl</span> <span class="kd">implements</span> <span class="n">CreativeService</span><span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ResultDTO</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="nf">addCreative</span><span class="o">(</span><span class="n">CreativeDTO</span> <span class="n">creativeDTO</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="n">creativeDAO</span><span class="o">.</span><span class="na">addCreative</span><span class="o">(</span><span class="k">do</span><span class="o">);</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个类有自己的测试保护，不过这次我们就不要看那些代码了，先用vim看看outline吧——</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">|-</span>   <span class="kd">class</span>
</span><span class='line'><span class="err">||     </span><span class="nc">CreativeServiceTest</span>
</span><span class='line'><span class="o">|-</span>   <span class="n">field</span>
</span><span class='line'><span class="o">||</span>     <span class="n">creativeService</span> <span class="o">[</span><span class="n">CreativeServiceTest</span><span class="o">]</span>
</span><span class='line'><span class="o">||</span>     <span class="n">creativeDAO</span> <span class="o">[</span><span class="n">CreativeServiceTest</span><span class="o">]</span>
</span><span class='line'><span class="o">||</span>     <span class="o">...</span>
</span><span class='line'><span class="o">|-</span>   <span class="n">method</span>
</span><span class='line'><span class="o">||</span>     <span class="n">before</span> <span class="o">[</span><span class="n">CreativeServiceTest</span><span class="o">]</span>
</span><span class='line'><span class="o">||</span>     <span class="o">...</span><span class="err">此处省略</span><span class="mi">10</span><span class="err">个用于测试</span><span class="n">addCreative</span><span class="err">的用例</span><span class="o">...</span>
</span><span class='line'><span class="o">||</span>     <span class="n">addCreative</span> <span class="o">[</span><span class="n">CreativeServiceTest</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>显然，服务层方法有非常充分的测试保护，通过服务层调用，creativeDTO也间接得到了验证，其功能覆盖要远大于之前单独针对DAO的测试用例。</p>

<p>那么，我们为什么要写那个DTO的测试呢？不但费力（11行set，每一行都需要精心填入合理的数据），还用处不大。</p>

<p>出现这个现象一般有两个原因——<br/>
* 实践中，工程师有时是先写DAO再写上层模块，这样，写完DAO以后service还不存在，要验证是正确性就必须写DAO的test case。
* service的运行一般是依赖某些服务容器的，为它编写的test case相当于服务器外部的一个客户端，而这需要将service部署起来。</p>

<p>前一个原因还好办，很多java团队都意识到DAO和相邻的软件层之间存在某些重复性，因而可以用类似代码模板的方式一次性生成DAO、Service。这时，service和DAO是一起出现的，这样，我们就可以直接关心service了。</p>

<p>而后一个原因则是困难所在，因为在没有持续集成意识并建立持续集成机制的团队中，“部署应用”这件事是所有工作中相对靠后的一步，通常是开发时间过半以后才有第一次部署，而这时团队成员们已经重复的写了很多测试用例。</p>

<p>解决这个问题，只有引入持续集成，在系统一开始，我们就“一杆子捅到底”，从“白板应用”开始进行持续构建、部署，新代码和功能不断地交付，功能验证可以在适合的层次上进行，对上面的例子而言，我们直接写service测试，那么对DAO部分的验证就可以直接省略了。</p>

<p>这一篇说的是java的场景，但其实道理有共同性，下次我们讨论一下erlang项目中的测试</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单元测试不是持续集成的基础]]></title>
    <link href="http://fsword.github.com/blog/2013/05/25/dan-yuan-ce-shi-bu-shi-chi-xu-ji-cheng-de-ji-chu/"/>
    <updated>2013-05-25T22:25:00+08:00</updated>
    <id>http://fsword.github.com/blog/2013/05/25/dan-yuan-ce-shi-bu-shi-chi-xu-ji-cheng-de-ji-chu</id>
    <content type="html"><![CDATA[<p>很多人关注甚至想尝试持续集成，然而也有一些人担心团队缺乏基础——“我们连单元测试都做不好，做持续集成不太合适吧”。如果不会走就学跑，那确实容易摔跤。不过，单元测试和持续集成并不是走和跑的关系。</p>

<p>为避免误解，首先明确一下名词(虽然没有照抄书本，但是应该不会差太远吧)：</p>

<ul>
<li>单元测试：以验证某个代码单元的正确性为目标进行的自动化测试活动，“代码单元”通常是函数、方法或者是类，测试过程中，目标单元对外部的编译或者功能依赖由stub或者mock技术进行隔离。</li>
<li>持续集成：一种敏捷实践，重点是尽早进行系统的集成测试，它在狭义上包括部署自动化和测试自动化。“持续”一般被理解为不断的对研发变更进行整体验证，“集成”通常包括对分支的集成（因此一般推荐单分支开发）和在一定条件下对不同子系统或者模块进行的集成。</li>
</ul>


<p>可以看出，单元测试针对的目标是局部而非整体，而持续集成面对的是整体。按照“饭要一口一口吃”的老话，似乎应该先做单元测试。</p>

<p>然而单元测试并不是免费的。任何自动化测试都是基于测试目标的功能而实现，因此，测试目标的稳定性就变成了测试价值的一个重要因素——时常发生变化的代码，对其做自动化测试是不划算的。那么，单元测试所针对那些小粒度的类、方法和函数，它们变化剧烈吗？</p>

<p>这可能和软件系统的类型有关。例如，如果我们是在开发一个短信发送客户端，由于所遵循的SMGP协议本身是相对稳定的，网络相关的功能单元就是稳定的；然而，如果我们开发一个应用系统（比如各种大大小小的互联网应用），业务上的变化可能对下层的模型代码产生天翻覆地的影响。考虑到大部分的软件研发团队和研发工程师们所处理的都是基于数据库+web的应用系统，我们所遇到的场景很可能是后一种情况。</p>

<p>去年我所在的团队推进质量改进时我们就发现了这个规律，当时我们首先推进的就是单元测试，虽然我强调“自动化测试”而非单元测试，但是开发同事们都很自然把精力放到了单元测试上。在一段时间的热心实施以后，一些人开始出现不同的声音——“有些测试刚写好，业务就发生了变化，不得不完全抛弃，瞎耽误时间”。问题显然不是同事们不尽责，我们分析发现，因为单元测试用例过于关注细节，业务变化的情况下很难进行积累，再继续下去会出现“边际效益递减”的情况，而如果开始做持续集成方面的工作，则可以补充自动化的集成用例——它相对稳定。</p>

<p>除此之外，单元测试还有一个常见的问题：mock的代价。</p>

<p>几年前ThoughtWorks的李晓有过一篇<a href="http://blog.sina.com.cn/s/blog_700820800100n2oh.html">不要把Mock当作你的设计利器</a>，<a href="http://www.iteye.com/topic/21630">这里</a>还有gigix转述郭晓的观点——</p>

<pre><code>I did have some doubts about using Mocks when i was programming, similar 
reasons - too hard to refactory, too brittle. And i total agree with the 
three places to use it - external resources (I/O), UI, third party API.
</code></pre>

<p>也许有人觉得这里的观点有些“极端”（好像中国人对“极端”是比较敏感的 :-D ），然而我们在实际工作中很容易感受到上述文章和引论所说的痛点。这里存在两个方面的问题——</p>

<ul>
<li>对变化不友好：一旦我们进行了mock，就在事实上建立了对外部变化的“屏障”——每次发生变化时都有可能忘记了被mock掉的“结合点”，即使记得，也增加了重构的成本，时间一长，维护mock代码就变成了一件苦差事</li>
<li>推迟集成：有了mock以后，我们可以很容易就建立起自动化验证机制。但是错误往往在于疏忽——mock掉的那个东西，未来需要使用“真实的东西“再测一遍，这不止增加了测试成本，而且还会在前期给人以“系统没问题”的错觉</li>
</ul>


<p>顺便说一句，这些问题在stub中也是类似的，mock和stub还有一些差异，但是这里就不涉及了。</p>

<p>对于这些分析，<a href="http://weibo.com/luning12">路宁同学</a> 的一个简单易用的观点是：“不对自己开发的模块写mock”，这个很好理解，因为自己开发的模块可以直接用“真家伙”，那么“假李鬼”也就用不着了。</p>

<p>我们是否可以沿着这个思路继续推进呢？实际上，之所以要区分“自己的模块”，是因为“自己的模块”好合作（自己和自己当然好合作），那么在我们推进持续集成以后呢？</p>

<p>持续集成，表面上看是在做部署自动化和测试自动化。然而这个实践的一个重要价值是“弥合缺口”——通过持续的将版本控制系统的多个分支合并到一个分支上，避免了分之间的鸿沟越来越大；通过持续的将系统的各个部分完整的部署在一起进行自动化联调和系统测试，避免了子系统与子系统、模块与模块之间的衔接隔阂。</p>

<pre><code>前者好理解，后者一般容易被忽视，我们知道，某些语言特性和框架也试图解决这种系统和模块边界
的衔接问题，例如java的interface，它就是设计来建立系统间协作接口的。然而真实的世界很难用
interface这类技术进行约束，即使实现了同样的interface，我们也不确定边界两边都遵守共同的约
束，能让我们放心的只有联调和系统测试。
</code></pre>

<p>显然，在我们推进持续集成的工作并通过这个工作不断的“弥合缺口”以后，那些之前不得不mock掉的所谓“别人的模块”甚至“外部的子系统”也就不再变得遥不可及而难以合作了。于是，我们惊喜的发现——mock变得可以省略了，随着持续集成的推进，一些原来不得不编写的mock可以直接用“真家伙”代替，而原来所倚仗的单元测试用例也随之变成了集成用例、联调用例&#8230;&#8230;</p>

<p>所以，单元测试并不是集成测试的基础。实际上，往往是持续集成扩展了质量保障的手段和方式，并因此减弱了单元测试的压力，从此我们可以专注在必要的单元测试用例上了。</p>

<p>如果你的团队做单元测试不是很给力，可以先找找原因，如果不是大家的主观意愿问题，不妨和持续集成的工作一起推进吧</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成中的缺环-4]]></title>
    <link href="http://fsword.github.com/blog/2012/12/14/chi-xu-ji-cheng-zhong-de-que-huan-4/"/>
    <updated>2012-12-14T22:14:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/12/14/chi-xu-ji-cheng-zhong-de-que-huan-4</id>
    <content type="html"><![CDATA[<p>昨天我用了很罗嗦的语言解释了一个简单的 DSL 例子，这是为了方便讲述后面的内容，那个例子是典型的“麻雀虽小，五脏俱全”，回想起来，它至少包含了这么几样——</p>

<pre><code>* 一个 DSL 解释脚本(dsl.rb)
* 一个装载脚本(run.rb)
* 使用 DSL 编写的文件(myapp)
</code></pre>

<p>这么继续演化下去，我们就会得到一个比较详细的实现方案。</p>

<p>不过，考虑到复杂性的增加，我们现在应该考虑一点设计了，比如代码的层次和结构。</p>

<p>代码如何组织呢？这是一个脚本为中心的项目，因此我们决定不使用unix那种传统的/usr, /bin, /etc 方案，而是直接把所有代码都放在一个目录下，这样比较方便清理，不用专门的打包工具。</p>

<p>首先很容易想到，我们需要普通的 config 目录；其次，考虑到我们会引入很多 profile 文件，所以建立一个专门的profile目录似乎也是很必要的；另外，作为脚本性质的项目，一定要有明确的调用入口，我们建立一个 script 目录用于存放直接执行用的脚本。</p>

<p>接下来是 lib 目录，我们应该把代码分开，做好高內聚和低耦合（这个没忘吧，脚本也要注意这些原则哦），因此一开始会是这样——</p>

<p><img src="http://fsword.github.com/images/adsci_dirs_old.png" alt="目录结构" /></p>

<p>看起来不错，但是用代码稍一尝试就发现了一些问题，主要是lib目录。</p>

<ul>
<li>没有考虑到外部服务的耦合，我们使用的系统服务应该是松耦合在这个体系中的，比如虚拟机分配系统，在淘宝这样的环境中，虚拟机分配系统可能有多种方案，随着业务和组织结构的变化，我们有可能需要切换不同的分配系统。</li>
<li>应用专用的目录没有办法去落实，实际上，DSL的方案决定了我们不会为某个应用做特殊化，我们要做的是各种服务的组装。</li>
<li>与capistrano相比，profile的设计显然有些僵硬，后续可能需要调整，当然，这样演化出来的可能是一个工具包，但是目前也想不清楚，我们把决策延后，暂时先不管它。</li>
</ul>


<p>经过设计和编码的迭代，目前是这样的：</p>

<p><img src="http://fsword.github.com/images/adsci_dirs.png" alt="目录结构" /></p>

<p>这并不是最后的结论，大家知道，设计和开发往往是交替进行的。不过无论如何，现在可以接着前进了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成中的缺环-3]]></title>
    <link href="http://fsword.github.com/blog/2012/12/13/chi-xu-ji-cheng-zhong-de-que-huan-3/"/>
    <updated>2012-12-13T13:45:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/12/13/chi-xu-ji-cheng-zhong-de-que-huan-3</id>
    <content type="html"><![CDATA[<p>终于要讲到 DSL 了，其实这个话题我更加感兴趣一些，这也是ruby的强项 :-)</p>

<p>我们首先应该从用户角度出发，看看用户写出来的 dsl 应该是什么样子，例如像一个配置文件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- encoding : UTF-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 定义web server类型，可选值: apache, nginx, tengine</span>
</span><span class='line'><span class="c1"># web_server :apache</span>
</span><span class='line'><span class="n">web_server</span> <span class="ss">:apache</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 定义应用服务器类型，可选值: tomcat, jboss</span>
</span><span class='line'><span class="c1"># app_server :tomcat # option: jboss</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 申请数据库资源</span>
</span><span class='line'><span class="c1"># from: 有时需要从已有的数据库中复制数据，from参数用于指明来源的数据库名称</span>
</span><span class='line'><span class="n">db</span> <span class="ss">:from</span> <span class="o">=&gt;</span> <span class="s1">&#39;sample&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设定源代码获取方式，目前仅支持git和svn两种</span>
</span><span class='line'><span class="n">source</span> <span class="ss">:svn</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://svn.yourserver.com/branches/some_branch&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设定安装包的来源，目前仅支持 rpm 包安装</span>
</span><span class='line'><span class="c1"># 注意：如果设定了安装包，adsci将跳过build环境，此时source设定不会生效</span>
</span><span class='line'><span class="n">pkg</span>   <span class="ss">:rpm</span> <span class="o">=&gt;</span> <span class="s1">&#39;http://yum.yourserver.com/your_package.rpm&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设定 mock 服务，指定的服务将用 mock 支持</span>
</span><span class='line'><span class="n">mock</span> <span class="ss">:service</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;myservice.core.1.0.0&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设定所依赖的其它 profile ，需要在指定 profile 的服务/应用启动后再启动</span>
</span><span class='line'><span class="n">after</span> <span class="ss">:portal</span>  <span class="k">do</span>
</span><span class='line'>  <span class="c1"># 在指定的 profile （这个例子中是 portal 应用）中为当前节点添加 url rewrite 规则</span>
</span><span class='line'>  <span class="n">rewrite</span> <span class="ss">:for</span> <span class="o">=&gt;</span> <span class="ss">:me</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 设定依赖的其它 profile ，不考虑启动顺序</span>
</span><span class='line'><span class="n">after</span> <span class="ss">:portal</span>  <span class="k">do</span>
</span><span class='line'>  <span class="n">route</span> <span class="ss">:for</span> <span class="o">=&gt;</span> <span class="ss">:me</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>真正的 DSL 应该比这个更强大一些，不过从这样开始应该不错。</p>

<blockquote><p>硬广告：这个文件比较简单，唯一需要说明的是tengine，这是淘宝基于nginx扩展的一个开源项目，好事者可以看<a href="https://github.com/taobao/tengine">这里</a>。</p></blockquote>

<p>用户通过这种方式说明自己的应用应该是怎样部署和工作的，其它事情交给工具。</p>

<p>实现DSL最常见的做法就是把DSL语句变成一个函数，然后在定义函数的上下文中eval用户的脚本，比如一个最简单的语法<code>web_server :apache</code>，
可以这么写——</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Dsl</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">web_server</span> <span class="nb">name</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;设定web server为</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果——</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">1.9.3p327 :008 &gt; include Dsl</span>
</span><span class='line'><span class="go"> =&gt; Object </span>
</span><span class='line'><span class="go">1.9.3p327 :009 &gt; eval(&quot;web_server :nginx&quot;)</span>
</span><span class='line'><span class="go">设定web server为nginx</span>
</span><span class='line'><span class="go"> =&gt; nil </span>
</span></code></pre></td></tr></table></div></figure>


<p>这就是最简单的配置项。<br/>
但是这样做有什么意义呢？我们可以这样修改一下 Dsl 的代码——</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- encoding : UTF-8 -*-</span>
</span><span class='line'><span class="c1"># 文件名 dsl.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Dsl</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">web_server</span> <span class="nb">name</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">name</span> <span class="o">==</span> <span class="ss">:apache</span>
</span><span class='line'>      <span class="sb">`sudo /etc/init.d/httpd start`</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="nb">name</span> <span class="o">==</span> <span class="ss">:nginx</span>
</span><span class='line'>      <span class="sb">`sudo /etc/init.d/nginx start`</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s1">&#39;抱歉，目前不支持这种 web server&#39;</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;启动 </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样也把eval的内容存为文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- encoding : UTF-8 -*-</span>
</span><span class='line'><span class="c1"># 文件名 myapp</span>
</span><span class='line'><span class="n">web_server</span> <span class="ss">:nginx</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后编写一个装载脚本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- encoding : UTF-8 -*-</span>
</span><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1"># 文件名 run.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./dsl&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kp">include</span> <span class="no">Dsl</span>
</span><span class='line'><span class="nb">eval</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;myapp&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
执行一下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">run</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="o">[</span><span class="n">sudo</span><span class="o">]</span> <span class="n">password</span> <span class="k">for</span> <span class="n">john</span><span class="p">:</span>
</span><span class='line'><span class="err">启动</span> <span class="n">nginx</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就完成了一个最简单的 dsl 样例，在这个样例中，我们通过一个关键词 <code>web_server</code> 驱动了逻辑</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续集成中的缺环-2]]></title>
    <link href="http://fsword.github.com/blog/2012/12/12/chi-xu-ji-cheng-zhong-de-que-huan-2/"/>
    <updated>2012-12-12T17:39:00+08:00</updated>
    <id>http://fsword.github.com/blog/2012/12/12/chi-xu-ji-cheng-zhong-de-que-huan-2</id>
    <content type="html"><![CDATA[<p>「接上篇」比较新旧两个图，可以发现，除了要做好多应用的部署自动化以外，还有一个问题需要我们考虑，那就是资源的自动分配。</p>

<p>常见的是数据库资源，由于我们过去一直依赖DBA分配数据库帐号，每次测试都是使用的同样的一个数据库，这样一来，开发人员想要测试就要申请自己的数据库资源，有新来的同学如果不知道，就会用源码中配好的那个数据库链接，如果这时有人在测试，那就悲剧了。而如果偶尔需要多个分支一起开发，情况就更加可怕。</p>

<p>解决这个问题的办法是资源隔离和动态分配。而且，这个做法不只限于数据库，几乎所有的基础设施都要这么做，你会发现这个环境似乎有些象“云”，好吧，虽然我不喜欢这个buzz word，但是沿着这个思路走下去，确实可以用到一些“云xx”的技术，我们只要拿来主义就可以了。</p>

<p>循着这个思路，我们搭建了一些支持动态分配资源的服务，这是后续工作的基础。为了能够方便的操控部署工作，我又把自己一直负责的easy commander（以前叫 AppOSS）也嫁接了过来，这样我们就得到了这些</p>

<p><img src="http://fsword.github.com/images/ci_deploy.png" alt="部署图" /></p>

<p>对单个应用而言，本来就有一些shell脚本（例如执行 maven 打包和启动停止服务器之类），所以我只要简单写一些ruby脚本负责协作，就让这个原型跑了起来，经过验证，可行。</p>

<p>接下来要做什么？我们现在仅仅用脚本驱动了起来，而ruby语言在我们这个团队中并不是公共知识，所以最好能够开发一些 DSL ，让大家简单的写一些“配置文件”，就能让自己关心的几个系统部署好。</p>

<p>如何实现这些DSL呢？明天接着说</p>
]]></content>
  </entry>
  
</feed>
